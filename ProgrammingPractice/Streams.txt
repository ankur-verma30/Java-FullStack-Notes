1️⃣ Filtering Even Numbers
Given a list of integers, use Streams to filter only even numbers and collect them into a list.
👉 Input: [1, 2, 3, 4, 5, 6]
👉 Output: [2, 4, 6]

✅ Solution: 
list.stream()
    .filter(x -> x % 2 == 0)
    .forEach(System.out::println);

2️⃣ Convert Strings to Uppercase
Given a list of strings, convert each string to uppercase using Streams.
👉 Input: ["java", "stream", "exercise"]
👉 Output: ["JAVA", "STREAM", "EXERCISE"]

✅ Solution:
list1.stream()
    .map(String::toUpperCase)
    .forEach(System.out::println);


3️⃣Square and Collect
Given a list of integers, square each number and collect them into a set (to remove duplicates).
👉 Input: [1, 2, 2, 3]
👉 Output: [1, 4, 9]

✅ Solution 1:
Set<Integer> squares = numbers.stream()
                              .map(x -> x * x)
                              .collect(Collectors.toSet());

✅ Solution 2:If order matters (e.g., interviewer asks for sorted unique squares), you can collect into a TreeSet:
Set<Integer> squares = numbers.stream()
                              .map(x -> x * x)
                              .collect(Collectors.toCollection(TreeSet::new));

✅ Solution 3: If dealing with large numbers, use mapToInt for efficiency:
Set<Integer> squares = numbers.stream()
                              .mapToInt(x -> x * x)
                              .boxed()
                              .collect(Collectors.toSet());


4️⃣Distinct & Sorted Words
Given a list of words, print all distinct words in sorted order using streams.
👉 Input: ["java", "code", "java", "stream", "code"]
👉 Output: ["code", "java", "stream"]

✅ Solution 1:
Set<String> str = list.stream()
                      .collect(Collectors.toCollection(TreeSet::new));

✅ Solution 2:
Set<String> distinct = list.stream()
                           .distinct()
                           .sorted()
                           .collect(Collectors.toSet());

✅ Solution 3:💡 For case-insensitive sorting, you can supply a comparator:
Set<String> str = list.stream()
                      .map(String::toLowerCase)
                      .collect(Collectors.toCollection(() -> new TreeSet<>(String.CASE_INSENSITIVE_ORDER)));

5️⃣Sum of Squares of Odd Numbers
Given a list of integers, use streams to compute the sum of squares of only odd numbers.
👉 Input: [1, 2, 3, 4, 5]
👉 Output: 35 (1^2 + 3^2 + 5^2 = 35)

✅ Solution:
int sum = numbers.stream()
                 .filter(x -> x % 2 != 0)
                 .map(x -> x * x)
                 .reduce(0, Integer::sum);

✅ Solution 2:
int sum = list.stream()
              .filter(x -> x % 2 != 0)
              .map(x -> x * x)
              .collect(Collectors.summingInt(Integer::intValue));

✅ Solution 3:
int sum = list.stream()
              .filter(x -> x % 2 != 0)
              .mapToInt(x -> x * x)
              .sum();


6️⃣Find the Longest String
Given a list of strings, use streams to find the longest string.
(If multiple strings have the same length, return any one of them.)
👉 Input: ["java", "stream", "exercise", "api"]
👉 Output: "exercise"

✅ Solution 1: Get any one longest string in the list
String longest = list.stream()
                      .max(Comparator.comparing(String::length))
                      .orElse(null);

✅ Solution 2:To get all string of maxLength
int maxLength = list.stream()
                    .mapToInt(String::length)
                    .max()
                    .orElse(0);

List<String> longestStrings = list.stream()
                                  .filter(s -> s.length() == maxLength)
                                  .toList();

7️⃣ Count Word Occurrences
Given a list of words, use streams to count how many times each word occurs.
👉 Input: ["apple", "banana", "apple", "orange", "banana", "apple"]
👉 Output: {apple=3, banana=2, orange=1}

✅ Solution 1:
Map<Object, Long> freq = fruits.stream()
    .collect(Collectors.groupingBy(w -> w, Collectors.counting()));

➤ This is correct but unsorted.

✅ Solution 2: Use TreeMap (Sorted by Key Automatically)
Map<String, Long> freq = fruits.stream()
    .collect(Collectors.groupingBy(w -> w, TreeMap::new, Collectors.counting()));

➤ Here TreeMap is provided as the map supplier → gives you natural key ordering.

👉 Output for ["apple", "banana", "apple", "orange", "banana", "apple"]:
{apple=3, banana=2, orange=1} (keys sorted alphabetically).


8️⃣Partition Numbers into Even and Odd
Given a list of integers, partition them into evens and odds using streams.
👉 Input: [1, 2, 3, 4, 5, 6]
👉 Output: {false=[1, 3, 5], true=[2, 4, 6]}
(where true = even, false = odd)

✅ Solution 1:
Map<Boolean, List<Integer>> freq = fruits.stream()
        .collect(Collectors.partitioningBy(x -> x % 2 == 0));
✅Output: {false=[1, 3, 5], true=[2, 4, 6]}

✅ Solution 2: If you want counts instead of lists, you can do:
Map<Boolean, Long> partitionedCount = fruits.stream()
        .collect(Collectors.partitioningBy(x -> x % 2 == 0, Collectors.counting()));
✅Output: {false=3, true=3}


9️⃣ Find the Most Frequent Character in a String
Given a string, use streams to find the character with the maximum frequency.
👉 Input: "banana"
👉 Output: a (since a appears 3 times)

✅ Solution 1:
Character mostFrequent = input.chars() // IntStream of Unicode values
            .mapToObj(c -> (char) c)          // convert int to Character
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) // count frequency
            .entrySet().stream()
            .max(Map.Entry.comparingByValue()) // find entry with max frequency
            .map(Map.Entry::getKey)            // extract the character
            .orElse(null);                     // handle empty string case

1️⃣0️⃣ Given a list of strings, join them into a single comma-separated string using streams.
👉 Input: ["apple", "banana", "orange"]
👉 Output: "apple, banana, orange"

✅ Solution:
String joinedFruits = fruits.stream()
                   .collect(Collectors.joining(", "));


1️⃣1️⃣ Given a list of names, group them based on their length.
👉 Input: ["Tom", "Jerry", "John", "Alex", "Bob"]
👉 Output: {3=[Tom, Bob], 4=[John, Alex], 5=[Jerry]}

✅ Solution:
Map<Integer, List<String>> ans = persons.stream()
                                        .collect(Collectors.groupingBy(String::length));

👉 Improvement (only if you want sorted keys):
Map<Integer, List<String>> ans = persons.stream()
    .collect(Collectors.groupingBy(String::length, TreeMap::new, Collectors.toList()));

1️⃣2️⃣ You have a list of students with their subject and score. Use streams to find the top scorer per subject.
👉 Input (Student class with name, subject, score):
[("Alice", "Math", 90), 
 ("Bob", "Math", 85), 
 ("Charlie", "Science", 95), 
 ("David", "Science", 80)]

👉 Output:{Math=Alice, Science=Charlie}

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Student {
 String name;
 String subject;
 int marks;

 public Student(String name, String subject, int marks) {
	this.name = name;
	this.subject = subject;
	this.marks = marks;
}

public String getName() {
	return name;
}
 public void setName(String name) {
	this.name = name;
 }
 public String getSubject() {
	return subject;
 }
 public void setSubject(String subject) {
	this.subject = subject;
 }
 public int getMarks() {
	return marks;
 }
 public void setMarks(int marks) {
	this.marks = marks;
 }

public static void main(String[] args) {
List<Student>student=new ArrayList<>();
student.add(new Student("Alice","Math",90));
student.add(new Student("Bob","Math",85));
student.add(new Student("Charlie","Science",95));
student.add(new Student("David","Science",80));

Map<String, Student> topStudentBySubject = student.stream()
    .collect(Collectors.groupingBy(
        Student::getSubject,
        Collectors.collectingAndThen(
            Collectors.maxBy(Comparator.comparingInt(Student::getMarks)),
            Optional::get
        )
    ));

System.out.println(topStudentBySubject);
}
}


1️⃣3️⃣Top Performer by Marks
➤ You are given a list of Student objects (name, subject, marks).
➤ Find the student with the highest marks overall.

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		super();
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Optional<Student> topStudent = student.stream().collect(Collectors.maxBy((Student s1,Student s2)->s1.getMarks()-s2.getMarks()));
		if(topStudent.isPresent()) {
			System.out.println(topStudent.get().getName());
		}
		
    }
}

🔄 Possible Improvements
👉 Use Comparator.comparingInt → makes code more readable and less error-prone (avoids subtraction overflow in general).

Optional<Student> topStudent = student.stream()
        .collect(Collectors.maxBy(
            java.util.Comparator.comparingInt(Student::getMarks)
        ));

👉 Print directly with ifPresent (avoids explicit isPresent + get()):
topStudent.ifPresent(s -> System.out.println(s.getName()));


1️⃣4️⃣Top Student in Each Subject
➤ From the same Student list, find the student with the maximum marks in each subject.
➤ (Basically what you attempted yesterday, but now you’ll write the clean final solution).

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Map<String, Student> topStudent = student.stream().
		collect(Collectors.groupingBy(Student::getSubject,Collectors.collectingAndThen(Collectors.maxBy(Comparator.comparingInt(Student::getMarks)), Optional::get))
				);
		
		for(Entry<String, Student>s :topStudent.entrySet()) {
			System.out.println("Subject is "+s.getKey() +" marks is "+s.getValue().getMarks());
		}	
	}
}

🔄 Improvements
✔️ Instead of a for loop, you could also use forEach on the map for cleaner code:

topStudent.forEach((subject, stud) -> 
    System.out.println("Subject: " + subject + ", Topper: " + stud.getName() + " with marks " + stud.getMarks())
);

✔️ If you ever want to make it null-safe (in case of empty student list), you could avoid Optional::get and handle Optional<Student> directly

1️⃣5️⃣Average Marks by Subject
➤ Group students by subject and compute the average marks for each subject.

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		super();
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Map<String, Double> topStudent = student.stream().
		collect(Collectors.groupingBy(Student::getSubject,Collectors.averagingInt(Student::getMarks)));
		for(Entry<String, Double> s :topStudent.entrySet()) {
			System.out.println("Subject is "+s.getKey() +" marks is "+s.getValue());
		}	
    }	
}

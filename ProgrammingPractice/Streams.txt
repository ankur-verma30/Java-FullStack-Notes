1️⃣ Filtering Even Numbers
Given a list of integers, use Streams to filter only even numbers and collect them into a list.
👉 Input: [1, 2, 3, 4, 5, 6]
👉 Output: [2, 4, 6]

✅ Solution: 
list.stream()
    .filter(x -> x % 2 == 0)
    .forEach(System.out::println);

2️⃣ Convert Strings to Uppercase
Given a list of strings, convert each string to uppercase using Streams.
👉 Input: ["java", "stream", "exercise"]
👉 Output: ["JAVA", "STREAM", "EXERCISE"]

✅ Solution:
list1.stream()
    .map(String::toUpperCase)
    .forEach(System.out::println);


3️⃣Square and Collect
Given a list of integers, square each number and collect them into a set (to remove duplicates).
👉 Input: [1, 2, 2, 3]
👉 Output: [1, 4, 9]

✅ Solution 1:
Set<Integer> squares = numbers.stream()
                              .map(x -> x * x)
                              .collect(Collectors.toSet());

✅ Solution 2:If order matters (e.g., interviewer asks for sorted unique squares), you can collect into a TreeSet:
Set<Integer> squares = numbers.stream()
                              .map(x -> x * x)
                              .collect(Collectors.toCollection(TreeSet::new));

✅ Solution 3: If dealing with large numbers, use mapToInt for efficiency:
Set<Integer> squares = numbers.stream()
                              .mapToInt(x -> x * x)
                              .boxed()
                              .collect(Collectors.toSet());


4️⃣Distinct & Sorted Words
Given a list of words, print all distinct words in sorted order using streams.
👉 Input: ["java", "code", "java", "stream", "code"]
👉 Output: ["code", "java", "stream"]

✅ Solution 1:
Set<String> str = list.stream()
                      .collect(Collectors.toCollection(TreeSet::new));

✅ Solution 2:
Set<String> distinct = list.stream()
                           .distinct()
                           .sorted()
                           .collect(Collectors.toSet());

✅ Solution 3:💡 For case-insensitive sorting, you can supply a comparator:
Set<String> str = list.stream()
                      .map(String::toLowerCase)
                      .collect(Collectors.toCollection(() -> new TreeSet<>(String.CASE_INSENSITIVE_ORDER)));

5️⃣Sum of Squares of Odd Numbers
Given a list of integers, use streams to compute the sum of squares of only odd numbers.
👉 Input: [1, 2, 3, 4, 5]
👉 Output: 35 (1^2 + 3^2 + 5^2 = 35)

✅ Solution:
int sum = numbers.stream()
                 .filter(x -> x % 2 != 0)
                 .map(x -> x * x)
                 .reduce(0, Integer::sum);

✅ Solution 2:
int sum = list.stream()
              .filter(x -> x % 2 != 0)
              .map(x -> x * x)
              .collect(Collectors.summingInt(Integer::intValue));

✅ Solution 3:
int sum = list.stream()
              .filter(x -> x % 2 != 0)
              .mapToInt(x -> x * x)
              .sum();


6️⃣Find the Longest String
Given a list of strings, use streams to find the longest string.
(If multiple strings have the same length, return any one of them.)
👉 Input: ["java", "stream", "exercise", "api"]
👉 Output: "exercise"

✅ Solution 1: Get any one longest string in the list
String longest = list.stream()
                      .max(Comparator.comparing(String::length))
                      .orElse(null);

✅ Solution 2:To get all string of maxLength
int maxLength = list.stream()
                    .mapToInt(String::length)
                    .max()
                    .orElse(0);

List<String> longestStrings = list.stream()
                                  .filter(s -> s.length() == maxLength)
                                  .toList();

7️⃣ Count Word Occurrences
Given a list of words, use streams to count how many times each word occurs.
👉 Input: ["apple", "banana", "apple", "orange", "banana", "apple"]
👉 Output: {apple=3, banana=2, orange=1}

✅ Solution 1:
Map<Object, Long> freq = fruits.stream()
    .collect(Collectors.groupingBy(w -> w, Collectors.counting()));

➤ This is correct but unsorted.

✅ Solution 2: Use TreeMap (Sorted by Key Automatically)
Map<String, Long> freq = fruits.stream()
    .collect(Collectors.groupingBy(w -> w, TreeMap::new, Collectors.counting()));

➤ Here TreeMap is provided as the map supplier → gives you natural key ordering.

👉 Output for ["apple", "banana", "apple", "orange", "banana", "apple"]:
{apple=3, banana=2, orange=1} (keys sorted alphabetically).


8️⃣Partition Numbers into Even and Odd
Given a list of integers, partition them into evens and odds using streams.
👉 Input: [1, 2, 3, 4, 5, 6]
👉 Output: {false=[1, 3, 5], true=[2, 4, 6]}
(where true = even, false = odd)

✅ Solution 1:
Map<Boolean, List<Integer>> freq = fruits.stream()
        .collect(Collectors.partitioningBy(x -> x % 2 == 0));
✅Output: {false=[1, 3, 5], true=[2, 4, 6]}

✅ Solution 2: If you want counts instead of lists, you can do:
Map<Boolean, Long> partitionedCount = fruits.stream()
        .collect(Collectors.partitioningBy(x -> x % 2 == 0, Collectors.counting()));
✅Output: {false=3, true=3}


9️⃣ Find the Most Frequent Character in a String
Given a string, use streams to find the character with the maximum frequency.
👉 Input: "banana"
👉 Output: a (since a appears 3 times)

✅ Solution 1:
Character mostFrequent = input.chars() // IntStream of Unicode values
            .mapToObj(c -> (char) c)          // convert int to Character
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())) // count frequency
            .entrySet().stream()
            .max(Map.Entry.comparingByValue()) // find entry with max frequency
            .map(Map.Entry::getKey)            // extract the character
            .orElse(null);                     // handle empty string case

1️⃣0️⃣ Given a list of strings, join them into a single comma-separated string using streams.
👉 Input: ["apple", "banana", "orange"]
👉 Output: "apple, banana, orange"

✅ Solution:
String joinedFruits = fruits.stream()
                   .collect(Collectors.joining(", "));


1️⃣1️⃣ Given a list of names, group them based on their length.
👉 Input: ["Tom", "Jerry", "John", "Alex", "Bob"]
👉 Output: {3=[Tom, Bob], 4=[John, Alex], 5=[Jerry]}

✅ Solution:
Map<Integer, List<String>> ans = persons.stream()
                                        .collect(Collectors.groupingBy(String::length));

👉 Improvement (only if you want sorted keys):
Map<Integer, List<String>> ans = persons.stream()
    .collect(Collectors.groupingBy(String::length, TreeMap::new, Collectors.toList()));

1️⃣2️⃣ You have a list of students with their subject and score. Use streams to find the top scorer per subject.
👉 Input (Student class with name, subject, score):
[("Alice", "Math", 90), 
 ("Bob", "Math", 85), 
 ("Charlie", "Science", 95), 
 ("David", "Science", 80)]

👉 Output:{Math=Alice, Science=Charlie}

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Student {
 String name;
 String subject;
 int marks;

 public Student(String name, String subject, int marks) {
	this.name = name;
	this.subject = subject;
	this.marks = marks;
}

public String getName() {
	return name;
}
 public void setName(String name) {
	this.name = name;
 }
 public String getSubject() {
	return subject;
 }
 public void setSubject(String subject) {
	this.subject = subject;
 }
 public int getMarks() {
	return marks;
 }
 public void setMarks(int marks) {
	this.marks = marks;
 }

public static void main(String[] args) {
List<Student>student=new ArrayList<>();
student.add(new Student("Alice","Math",90));
student.add(new Student("Bob","Math",85));
student.add(new Student("Charlie","Science",95));
student.add(new Student("David","Science",80));

Map<String, Student> topStudentBySubject = student.stream()
    .collect(Collectors.groupingBy(
        Student::getSubject,
        Collectors.collectingAndThen(
            Collectors.maxBy(Comparator.comparingInt(Student::getMarks)),
            Optional::get
        )
    ));

System.out.println(topStudentBySubject);
}
}


1️⃣3️⃣Top Performer by Marks
➤ You are given a list of Student objects (name, subject, marks).
➤ Find the student with the highest marks overall.

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		super();
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Optional<Student> topStudent = student.stream().collect(Collectors.maxBy((Student s1,Student s2)->s1.getMarks()-s2.getMarks()));
		if(topStudent.isPresent()) {
			System.out.println(topStudent.get().getName());
		}
		
    }
}

🔄 Possible Improvements
👉 Use Comparator.comparingInt → makes code more readable and less error-prone (avoids subtraction overflow in general).

Optional<Student> topStudent = student.stream()
        .collect(Collectors.maxBy(
            java.util.Comparator.comparingInt(Student::getMarks)
        ));

👉 Print directly with ifPresent (avoids explicit isPresent + get()):
topStudent.ifPresent(s -> System.out.println(s.getName()));


1️⃣4️⃣Top Student in Each Subject
➤ From the same Student list, find the student with the maximum marks in each subject.
➤ (Basically what you attempted yesterday, but now you’ll write the clean final solution).

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Map<String, Student> topStudent = student.stream().
		collect(Collectors.groupingBy(Student::getSubject,Collectors.collectingAndThen(Collectors.maxBy(Comparator.comparingInt(Student::getMarks)), Optional::get))
				);
		
		for(Entry<String, Student>s :topStudent.entrySet()) {
			System.out.println("Subject is "+s.getKey() +" marks is "+s.getValue().getMarks());
		}	
	}
}

🔄 Improvements
✔️ Instead of a for loop, you could also use forEach on the map for cleaner code:

topStudent.forEach((subject, stud) -> 
    System.out.println("Subject: " + subject + ", Topper: " + stud.getName() + " with marks " + stud.getMarks())
);

✔️ If you ever want to make it null-safe (in case of empty student list), you could avoid Optional::get and handle Optional<Student> directly

1️⃣5️⃣Average Marks by Subject
➤ Group students by subject and compute the average marks for each subject.

✅ Solution:
package stream;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

public class Student{
	String name;
	String subject;
	int marks;
	
	public Student(String name, String subject, int marks) {
		super();
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public int getMarks() {
		return marks;
	}

	public void setMarks(int marks) {
		this.marks = marks;
	}

	public static void main(String[] args) {
		List<Student> student=new ArrayList<>();
		student.add(new Student("Ankur","Maths",99));
		student.add(new Student("Deepak","CS",100));
		student.add(new Student("Isha","Chemistry",101));
		
		Map<String, Double> topStudent = student.stream().
		collect(Collectors.groupingBy(Student::getSubject,Collectors.averagingInt(Student::getMarks)));
		for(Entry<String, Double> s :topStudent.entrySet()) {
			System.out.println("Subject is "+s.getKey() +" marks is "+s.getValue());
		}	
    }	
}

1️⃣6️⃣You have a list of Student(name, subject, marks).
Find the number of students in each subject.

✅ Solution:
package stream;

public class Student {
	String name;
	String subject;
	int marks;
	public Student(String name, String subject, int marks) {
		super();
		this.name = name;
		this.subject = subject;
		this.marks = marks;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSubject() {
		return subject;
	}
	public void setSubject(String subject) {
		this.subject = subject;
	}
	public int getMarks() {
		return marks;
	}
	public void setMarks(int marks) {
		this.marks = marks;
	}
}

public class Solution{
	public static void main(String[] args) {
		List<Student> students = new ArrayList<>();
		students.add(new Student("Ankur", "Maths", 95));
		students.add(new Student("Deepak", "CS", 88));
		students.add(new Student("Isha", "Chemistry", 91));
		students.add(new Student("Ravi", "Maths", 76));
		students.add(new Student("Neha", "CS", 92));
		students.add(new Student("Aman", "Physics", 85));
		students.add(new Student("Pooja", "Chemistry", 99));
		students.add(new Student("Karan", "Maths", 89));
		students.add(new Student("Sneha", "Physics", 94));
		students.add(new Student("Rahul", "CS", 97));
		
		Map<String, Long> studentWithCount = students.stream().collect(Collectors.groupingBy(Student::getSubject,Collectors.counting()));
		
		System.out.println(studentWithCount);
	}
}

1️⃣7️⃣From the same list, group students by subject and collect only their names into a list.

✅ Solution:
Map<String, List<String>> namesBySubject = students.stream()
        .collect(Collectors.groupingBy(
            Student::getSubject,
            Collectors.mapping(Student::getName, Collectors.toList())
        ));


1️⃣8️⃣Find the top 2 students with the highest marks overall (not grouped by subject).

✅ Solution:
List<String> top2Students = students.stream()
				.sorted(java.util.Comparator.comparing(Student::getMarks)
			    .reversed())
				.limit(2).collect(Collectors.mapping(Student::getName, Collectors.toList()));

✅Solution 2: Cleaner Code
List<String> top2Students = students.stream()
        .sorted(Comparator.comparingInt(Student::getMarks).reversed())
        .limit(2)
        .map(Student::getName) 
        .collect(Collectors.toList());

System.out.println(top2Students);


1️⃣9️⃣ Employees by Department
➤ You have a list of Employee(name, department, salary).
➤ Group employees by department and list all employee names in each department.

✅ Solution:
package stream;

import java.util.*;
import java.util.Map.Entry;
import java.util.stream.Collectors;

class Employee {
    private String name;
    private String department;
    private double salary;

    public Employee(String name, String department, double salary) {
        this.name = name;
        this.department = department;
        this.salary = salary;
    }

    public String getName() {
        return name;
    }
    public String getDepartment() {
        return department;
    }
    public double getSalary() {
        return salary;
    }

    @Override
    public String toString() {
        return name + " (" + department + ", " + salary + ")";
    }
}

public class Solution{
	public static void main(String[] args) {
		List<Employee> employees = Arrays.asList(
			    new Employee("Alice", "IT", 75000),
			    new Employee("Bob", "IT", 82000),
			    new Employee("Charlie", "HR", 60000),
			    new Employee("David", "Finance", 90000),
			    new Employee("Eva", "HR", 65000),
			    new Employee("Frank", "Finance", 88000),
			    new Employee("Grace", "IT", 95000),
			    new Employee("Hannah", "Finance", 70000),
			    new Employee("Ian", "HR", 72000),
			    new Employee("Jack", "IT", 78000)
			);
			
		 employees.stream().collect(Collectors
				 .groupingBy(Employee::getDepartment))
		 .entrySet().forEach(entry->{
			 System.out.println("Department: "+ entry.getKey());
			 entry.getValue().forEach(System.out::println);
		        System.out.println();
		 });	
	}
}

2️⃣0️⃣ Highest Salary per Department
➤ From the same list, find the employee with the maximum salary in each department.

✅ Solution:
employees.stream()
    .collect(Collectors.groupingBy(
        Employee::getDepartment,
        Collectors.collectingAndThen(
            Collectors.maxBy(Comparator.comparing(Employee::getSalary)),
            Optional::get
        )))
    .forEach((dept, emp) -> {
        System.out.println("Department: " + dept);
        System.out.println("Highest Paid: " + emp.getName() + " with salary " + emp.getSalary());
        System.out.println();
    });


2️⃣1️⃣ Department-wise Average Salary
➤ Compute the average salary of employees in each department.

✅ Solution:
employees.stream()
    .collect(Collectors.groupingBy(
        Employee::getDepartment,
        Collectors.averagingDouble(Employee::getSalary)
    ))
    .forEach((dept, avgSalary) -> {
        System.out.println("Department: " + dept + ", Average Salary: " + avgSalary);
    });


2️⃣2️⃣ Transaction Amounts by Type
➤ You have a list of Transaction(id, type, amount) where type = "CREDIT" or "DEBIT".
➤ Compute the total amount of CREDIT and DEBIT transactions separately.

✅ Solution:
transactions.stream()
    .collect(Collectors.groupingBy(Transaction::getType,
            Collectors.summingDouble(Transaction::getAmount)))
    .forEach((type, amount) -> 
        System.out.println("Type is: " + type + " Amount is: " + amount));


2️⃣3️⃣ Top 3 Highest Transactions
➤ Find the top 3 transactions by amount.

✅ Solution:
 transactions.stream()
        .sorted(Comparator.comparingDouble(Transaction::getAmount)
        		.reversed()).limit(3)
        .forEach(e->System.out.println(e.getAmount()));;

2️⃣4️⃣ Transactions Above a Threshold
➤ Given a threshold (e.g., 5000), get the list of transaction IDs whose amount is greater than the threshold.

✅ Solution:
transactions.stream()
    .filter(e -> e.getAmount() > 5000)                  // keep only transactions > 5000
    .map(e -> e.getCustomerName())                      // extract customer names
    .toList().stream()                                  // convert to list, then stream again ❌ (unnecessary step)
    .distinct()                                         // remove duplicates
    .forEach(System.out::println);                      // print unique customer names


⚠️ Minor Improvement
Don’t need .toList().stream(). You can directly chain distinct() after map().

transactions.stream()
    .filter(e -> e.getAmount() > 5000)
    .map(Transaction::getCustomerName)
    .distinct()
    .forEach(System.out::println);


2️⃣5️⃣ Employee Salary Raise
Given a list of Employee objects (name, department, salary), create a new list of employees where each employee in the "IT" department gets a 10% salary hike, and print the updated list.

✅ Solution:
List<Employee> employees = Arrays.asList(
    		    new Employee("Alice", "IT", 75000),
    		    new Employee("Bob", "IT", 82000),
    		    new Employee("Charlie", "HR", 60000),
    		    new Employee("David", "Finance", 90000),
    		    new Employee("Eva", "HR", 65000),
    		    new Employee("Frank", "Finance", 88000),
    		    new Employee("Grace", "IT", 95000),
    		    new Employee("Hannah", "Finance", 70000),
    		    new Employee("Ian", "HR", 72000),
    		    new Employee("Jack", "IT", 78000)
    		);

       employees.stream()
       .filter(e->e.getDepartment().contains("IT"))
       .map(e->{
    	   e.setSalary(e.getSalary()+0.1*e.getSalary());
    	   return e;
       }).forEach(System.out::println);  


2️⃣6️⃣ Longest String in a List
Given a list of strings, use streams to find the longest string in the list. If there are multiple with the same length, return any one of them.

✅ Solution:
String maxWord = words.stream()
    			.collect(Collectors
    					.maxBy(Comparator.comparing(String::length)))
    			.get();

➤ Collectors.maxBy(Comparator.comparing(String::length)) is valid.
➤ .get() gives you the longest string.

⚠️ Issues
➤ .collect(Collectors.maxBy(...)) returns an Optional<String>, and you are calling .get() directly.
➤ If the list is empty, .get() will throw NoSuchElementException.

🔄 Minor Improvement
String maxWord = words.stream()
        .max(Comparator.comparing(String::length))
        .orElse("No words found");


2️⃣7️⃣ Transaction Analysis
Given a list of Transaction objects (id, customerName, type, amount), find the average transaction amount for each transaction type.

✅ Solution:
  transactions.stream()
        .collect(Collectors.groupingBy(Transaction::getType, Collectors.averagingDouble(Transaction::getAmount)))
        .forEach((type,avgSalary)-> System.out.println("Type is: "+type+" Average Salary is: "+avgSalary));


2️⃣8️⃣Employee Department Stats
Given a list of Employee objects (name, department, salary), find the average salary per department, and print the result.

✅ Solution:
employees.stream()
            .collect(Collectors.groupingBy(
                Employee::getDepartment,
                Collectors.averagingDouble(Employee::getSalary)
            ))
            .forEach((department, avgSalary) -> {
                System.out.println("Department: " + department + " | Avg Salary: " + avgSalary);
            });

2️⃣9️⃣String Frequency (Sorted)
Given a list of strings, count the frequency of each string and return the result sorted by frequency in descending order.

✅ Solution:
  	words.stream()
        .collect(Collectors.groupingBy(word -> word, Collectors.counting())) // count frequency
        .entrySet().stream()
        .sorted(Map.Entry.<String, Long>comparingByValue(Comparator.reverseOrder())) 
        .forEach(entry -> System.out.println(entry.getKey() + " -> " + entry.getValue()));

3️⃣0️⃣Top Customer by Transaction Amount
Given a list of Transaction objects (id, customerName, type, amount), find the customer who spent the highest total amount (summing all their transactions).

String key = transactions.stream()
    .collect(Collectors.groupingBy(Transaction::getCustomerName, Collectors.summingDouble(Transaction::getAmount))) // total amount per customer
    .entrySet().stream()
    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) // sort by total amount desc
    .findFirst().get() // pick top customer
    .getKey(); // extract customer name

System.out.println(key);

🧠 Why SQL?
We need a language to interact with databases—whether it's to store, retrieve, update, or delete data.
SQL (Structured Query Language) is the standard language used for interacting with Relational Databases.

With SQL, we can perform:

➤ Create – Create new records or database structures
➤ Read – Retrieve data from tables
➤ Update – Modify existing records
➤ Delete – Remove data
These operations are known as CRUD operations and are essential for any database-driven application.

Key Features and Advantages of Using SQL
✔️ Simplicity: SQL is easy to learn English-like syntax and use, making it accessible to a wide range of developers.
✔️ Ubiquity: SQL is a widely used language, making it easy to learn and use.
✔️ Flexibility: SQL supports a wide range of database operations, including data definition, data manipulation, and data control.
✔️ Performance: SQL provides efficient and optimized database operations, making it suitable for high-performance applications.
✔️ Data Integrity: SQL ensures data integrity and security, making it suitable for enterprise-level applications.

🧠 What is MySQL?
MySQL is a Relational Database Management System (RDBMS) that uses SQL as its querying language.
It is:
➤ Open-source and widely used in web and enterprise applications
➤ Known for its speed, reliability, and ease of use
➤ Maintained by Oracle Corporation

MySQL allows you to:
➤ Store data in tables
➤ Establish relationships using primary and foreign keys
➤ Enforce data integrity and security
➤ Handle large volumes of structured data efficiently

✅ In short:
SQL is the language, while MySQL is a software (RDBMS) that understands and executes SQL queries.

🧠 How SQL Helps Us
SQL (Structured Query Language) enables users to interact with relational databases effectively. It supports a wide range of operations, grouped into the following categories:

✅ 1. Retrieving Data
➤ SQL allows users to fetch specific and meaningful data from large datasets.
➤ Users can apply filters, conditions, sorting, and grouping to extract exactly what is needed.
➤ This is essential for generating reports, dashboards, and data analysis.

✅ 2. Manipulating Data
➤ SQL provides commands to add, update, and delete records in the database.
➤ These operations help maintain up-to-date and accurate information.
➤ It supports bulk updates and conditional changes as well.

✅ 3. Defining Data
➤ SQL allows the creation and modification of the database structure.
➤ This includes creating or altering tables, views, indexes, and constraints.
➤ It ensures the data is stored in an organized and consistent format.

✅ 4. Controlling Data
➤ SQL supports user access control by allowing database administrators to grant or revoke permissions.
➤ It ensures that sensitive data is only accessible to authorized users.
➤ Helps enforce security, privacy, and role-based access.

🧠 Types of SQL Commands
SQL commands are categorized based on the type of operation they perform on the database:

✅ 1. Data Query Language (DQL)
➤ Purpose: To retrieve data from the database.

Command: SELECT
Note: Although it has only one command, it's one of the most frequently used.

✅ 2. Data Manipulation Language (DML)
➤ Purpose: To manipulate data stored in existing tables.
Common Operations:
1. Insert new records
2. Update existing records
3. Delete records

Commands: INSERT, UPDATE, DELETE
Affects: Only the data, not the structure.

✅ 3. Data Definition Language (DDL)
➤ Purpose: To define or modify the structure of database objects.

Used for:
Creating tables, indexes, and views
Modifying table structure
Deleting database objects

Commands: CREATE, ALTER, DROP, TRUNCATE, RENAME
Note: DDL commands are usually auto-committed (changes are permanent).

✅ 4. Data Control Language (DCL)
➤ Purpose: To control access to data and database operations.

Used for:
Granting permissions to users
Revoking access when needed

Commands: GRANT, REVOKE
Helps enforce: Data security and role-based access control.

✅ 5. Transaction Control Language (TCL)
➤ Purpose: To manage transactions in a database.

Used to:
Commit changes
Roll back changes in case of errors
Ensure consistency of operations

Commands: COMMIT, ROLLBACK, SAVEPOINT

🧠 Understanding Rows and Columns in a Table
Columns = Attributes / Fields / Characteristics
Each column in a table represents a specific attribute of the entity.
Example: In a Student table, columns could be RollNo, Name, Age, Department.

Rows = Records / Tuples
Each row stores a complete set of data for one instance of the entity.
In other words, a row contains all the attribute values for a single entity.

🧠 Hierarchy in a Relational Database System

✅ 1. Server
➤ A database server hosts and manages one or more databases.
➤ It handles connections, storage, and access control.

✅ 2. Database
➤ A database is a logical collection of related data.
➤ You can create multiple databases on a single server.
➤ Each database is independent and contains its own tables, users, permissions, etc.

✅ 3. Tables
➤ A database is made up of multiple tables.
➤ Each table stores data related to a specific entity (e.g., students, employees).
➤ Tables are structured in rows and columns.

✅ 4. Records (Rows)
➤ A record (also called a tuple) represents one entry in the table.
➤ Each row holds data for one instance of the entity.

✅ 5. Attributes (Columns)
➤ Each record is made up of attributes (columns).
➤ Attributes represent the properties or characteristics of the entity.
Example: For a Student record, attributes could be Name, Roll No, Marks, etc.

🔁Server → Databases → Tables → Records → Attributes

🧠 Creation of Database
➤ We use the CREATE DATABASE statement to create a new database.
➤ SQL commands are not case-sensitive, but it's good practice to use uppercase for keywords.

✅ Basic Command: 
CREATE DATABASE database_name;

✅ To Avoid Errors (If Database Already Exists):
CREATE DATABASE IF NOT EXISTS database_name;
The IF NOT EXISTS clause is used to prevent errors if the database already exists.

This clause is commonly used with CREATE TABLE as well.

🧠 Deletion of Database
➤ We use the DROP DATABASE statement to permanently delete a database.
➤ This removes the entire database, including all:
1. Tables
2. Data
3. Views
4. Stored procedures
5. Other objects

It is a DDL (Data Definition Language) command.

✅ Basic Command:
DROP DATABASE database_name;

✅ To Avoid Errors (If Database Doesn’t Exist):
DROP DATABASE IF EXISTS database_name;

The IF EXISTS clause helps avoid runtime errors by checking if the database exists before trying to delete it.

🧠 Using a Database
➤ To work with a specific database, we use the USE statement.
➤ This command sets the active database for your current session.
➤ After executing it, all subsequent operations (like creating tables or inserting data) will apply to the selected database.

✅ Command:
USE database_name;

📝 Note:
➤ You must use this command before performing any operations on tables if multiple databases exist on the server.
➤ This helps the DBMS understand which database you’re referring to.

🧠 Showing All Databases
➤ To view all databases available on the current database server, we use the SHOW DATABASES command.
➤ It displays a list of all existing databases, whether created by the user or system-defined.

✅ Command:
SHOW DATABASES;

📝 Note:
➤ You can only see databases for which you have access privileges.
➤ This is helpful when working on a shared server or verifying successful creation of a new database.

🧠 Select Database
✅ Command:
SELECT DATABASE();

➤ This command displays the currently active database for the current session.

🔷 Working with Tables

🧠 Creating a Table
➤ We use the CREATE TABLE statement to define a new table within a database.
➤ It is a DDL command.
➤ A table consists of columns, each with a data type and optional constraints to enforce rules on the data.

✅ Syntax:
CREATE TABLE table_name (
    column1 data_type1 constraint1,
    column2 data_type2 constraint2,
    column3 data_type3 constraint3,
    ...
    table_constraints
);

✅Example:
CREATE TABLE employees(
employee_id int primary key auto_increment,
first_name varchar(50) not null,
last_name varchar(50) not null,
email varchar(50) unique,
hire_date date default (current_date()),
phone_number varchar(20) unique,
salary decimal(10,2) check (salary> 0.0),
employment_status enum('active', 'on leave', 'terminated') default 'active',
created_at timestamp default current_timestamp,
updated_at timestamp default current_timestamp on update current_timestamp

);

📝 Explanation:
➤ table_name: Name of the table you want to create.
➤ column1, column2, ...: Names of the columns (attributes).
➤ data_type: Defines the type of data (e.g., INT, VARCHAR, DATE).
➤ constraint (optional): Rules like PRIMARY KEY, NOT NULL, UNIQUE, etc.

🧠 Inserting Values into a Table
➤ INSERT is a DML (Data Manipulation Language) command.
➤ It is used to add new records (rows) into an existing table.

✅ Syntax:
INSERT INTO table_name (column1, column2, ..., columnN)
VALUES (value1, value2, ..., valueN);
📝 Key Points:
➤ Column names should match the order of values provided.
➤ You must ensure the values follow the data type and constraint rules defined during table creation.

➤ If you want to insert into all columns, you can skip the column list:
INSERT INTO table_name VALUES (value1, value2, ..., valueN);

✅Example:
insert into employees (first_name,last_name,email,phone_number,salary,employment_status) values ('John','Doe','2aLX0@example.com','1234567890',10000.00,'active');

🧠 Viewing Data from a Table
➤ We use the SELECT command to retrieve data from one or more columns in a table.
➤ It is a DQL (Data Query Language) command.

🔄Use Cases:
1️⃣ To view specific columns:
SELECT column_name1, column_name2 FROM table_name;

✅ Example:
🔗 SELECT cid FROM course;
(This displays only the cid column from the course table.)

2️⃣ To view all columns and all records:
🔗 SELECT * FROM table_name;

✅ Example:
🔗 SELECT * FROM course;
(This displays the entire table, including all columns and all rows.)

3️⃣ To change the name of the columns in output for better readability
🔗 SELECT column_name1 AS column_name1_alias, column_name2 AS column_name2_alias FROM table_name;

✅ Example:
🔗 SELECT cid AS course_id, cname AS course_name FROM course;

4️⃣ To filter data based on conditions:
🔗 Select * from employees where department="IT" order by salary desc  → Displays all employees in the IT department sorted by salary in descending order

5️⃣ To limit the number of rows returned:
🔗 Select * from employees where department="IT" order by salary desc limit 2  → Displays the top 2 employees in the IT department sorted by salary in descending order

6️⃣ To display unique values:
🔗 Select distinct department from employees;  → Displays unique departments from the employees table.

7️⃣ To display calculated values:
🔗 Select first_name, last_name, salary*1.1 as 'Salary After Raise' from employees;  → Displays first name, last name, and salary after a 10% raise.

8️⃣ Working with built-in function:
🔗 Select concat(first_name," ",last_name) as 'Full Name', YEAR(hire_date) as 'Year of Joining', Round(salary,1) from employees; 

9️⃣ Working with subquery(Nested queries):
🔗 Select * from employees where salary>(select avg(salary) from employees);

1️⃣0️⃣ Working with union:
🔗 Select first_name, last_name from employees where department="IT" union select first_name, last_name from employees where department="HR";

1️⃣1️⃣ Working with group by:
select count(*), department from employees group by department;

1️⃣2️⃣ Evaluating expressions using select(used for debugging):
🔗 select now() as 'time';
🔗 select 5*2;
🔗 select length('hello');
🔗 select 5<3;

📝 Note:
➤ * is a wildcard that means "all columns".
➤ The result set may be filtered or sorted further using clauses like WHERE, ORDER BY, etc.

🧠 Viewing All Tables in a Database
➤ We use the SHOW TABLES command to list all tables present in the currently selected database.
➤ It helps verify if a table was created successfully or to explore existing tables.

✅ Command:
SHOW TABLES;

📝 Note:
➤ You must first select a database using the USE database_name; command before running SHOW TABLES.
➤ Only tables within the currently active database will be shown.
➤ Useful for database exploration and management.

🧠 Alter Table Command
➤ We use the ALTER TABLE command to modify the structure of an existing table.
➤ It is a DDL (Data Definition Language) command.

✅ Use Cases:
🔹 To add a new column:
ALTER TABLE table_name ADD COLUMN new_column_name data_type;

🔹 To modify an existing column:
ALTER TABLE table_name MODIFY COLUMN column_name data_type;

🔹 To delete a column:
ALTER TABLE table_name DROP COLUMN column_name;

🔹 To rename a table/column_name:
ALTER TABLE table_name RENAME TO new_table_name;

🔹 To add constraints:
ALTER TABLE table_name ADD CONSTRAINT constraint_name CHECK (condition);

✅Example:
1️⃣ Alter table employees add column description text;

2️⃣ ALTER TABLE employees 
ADD COLUMN emergency_contact VARCHAR(100) 
NOT NULL DEFAULT 'Name:0000000000'
CHECK (emergency_contact REGEXP '^[A-Za-z]+:[0-9+-]+$');

🧠 Drop table table_name
➤ We use the DROP TABLE command to remove an existing table from the database.
➤ It is a DDL (Data Definition Language) command.

✅ Use Cases:
🔹 To delete a table:
DROP TABLE table_name if exists;

🧠 Data Types in SQL
SQL provides various data types to define the type of data that can be stored in each column of a table.

✅ 1. Numeric Data Types
Used to store numbers (integers or decimals).

➤ INT / INTEGER – Whole numbers (INT_MIN to INT_MAX)- 4 Bytes
➤ SMALLINT – Smaller range of integers 2 Bytes
➤ TINYINT – Smallest range of integers 1 Byte
➤ MEDIUMINT – Medium range of integers 3 Bytes
➤ BIGINT – Larger range of integers 8 Bytes

➤ DECIMAL(p,s) – Fixed-point number with precision p and scale s (e.g., DECIMAL(5,2) → 123.45)- Variable Size limit of (p,s) is (65,30).
➤ DOUBLE – Double-precision floating-point numbers (8-byte) (10,0) as precision and scale
➤ FLOAT – Approximate floating-point numbers (4-byte) (not always precise)

By default all the numeric dataypes can have negative as well as positive values. This restrict the range so if we know there is only +ve values which is stored we use UNSIGNED attribute (0-255).
 
✅ 2. Character/String Data Types
Used to store text.

➤ CHAR(n) – Fixed-length string range(0-255) (e.g., CHAR(10) stores exactly 10 characters)
➤ VARCHAR(n) – Variable-length string range(65535 bytes) (up to n characters)
➤ TEXT – Large text blocks (no fixed limit like VARCHAR)

✅ 3. Date and Time Data Types
Used to store date/time values.

➤ DATE – Stores a date (YYYY-MM-DD)
➤ TIME – Stores a time (HH:MM:SS)
➤ DATETIME – Stores both date and time
➤ TIMESTAMP – Similar to DATETIME, often used for auto-recording date/time of entry
➤ YEAR - Stores a year (2-digit or 4-digit format)

✅ 4. Boolean Data Type
Used for true/false values.
BOOLEAN / BOOL – Stores TRUE or FALSE (internally stored as 1 or 0)

✅ 5. Binary Data Types
Used to store binary data (e.g., images, files).
➤ BINARY(n) – Fixed-length binary data 255 bytes
➤ VARBINARY(n) – Variable-length binary data 64KB
➤ BLOB – Binary Large Object, used to store large binary files like images or documents
Categories of BLOB data types:
    ➤ TINYBLOB (255 bytes)
    ➤ BLOB (64KB)
    ➤ MEDIUMBLOB (16MB)
    ➤ LONGBLOB (4GB)

✅ Enum Data Type
➤ Used to store a set of predefined values.
➤ Size is limited to 65535 members.
➤ Single Seleection from a fixed list.
✅Example: ENUM('active', 'inactive', 'deleted');

✅ Set Data Type
➤ Used to store a set of values.
➤ Size is limited to 64 members.
➤ Multiple Selection from a fixed list.
✅Example: SET('A', 'B', 'C');

📝 Tips for Interviews:
➤ Use VARCHAR over CHAR for variable-length strings to save space.
➤ Prefer DECIMAL/NUMERIC over FLOAT for money-related values to maintain precision.
➤ TIMESTAMP is auto-updated on row modification (useful for tracking updates).

🧠 Keys in SQL
Keys are crucial in SQL to uniquely identify records and establish relationships between tables.

✅ 1. Primary Key
➤ A Primary Key uniquely identifies each record in a table.
➤ It ensures that no two rows have the same value for this key.

A primary key column must be:
1. Unique
2. Not Null

A table can have only one primary key, which can consist of one or more columns (composite key).

📌 Purpose: Uniquely identify each row.

✅ 2. Foreign Key
➤ A Foreign Key is a column (or set of columns) in one table that refers to the Primary Key in another table.
➤ It is used to establish a relationship between two tables (called referential integrity).
➤ A foreign key can have duplicate and null values, unlike primary keys.

📌 Terms:
➤ Referenced Table: The table containing the primary key.
➤ Referencing Table: The table containing the foreign key.

📝 Example Use Case:
Students table has student_id as primary key.
Enrollments table has student_id as foreign key, referencing the Students table.

📊 Sample Data:
🔹 Students Table:
| student\_id | name  | department |
| ----------- | ----- | ---------- |
| 101         | Ankur | CS         |
| 102         | Riya  | IT         |

🔹 Enrollments Table:
| enrollment\_id | student\_id | course\_name |
| -------------- | ----------- | ------------ |
| 1              | 101         | DBMS         |
| 2              | 102         | SQL          |
| 3              | 101         | Data Science |

The Enrollments.student_id refers to Students.student_id, ensuring relational integrity.

🧠 Constraints in SQL
Constraints are rules applied to columns or tables to maintain the accuracy, validity, and integrity of data in a database.

✅ Common SQL Constraints:
🧠 SQL Constraints with Examples
Each of the following examples uses a new table to demonstrate a specific constraint.

✅ 1. UNIQUE Constraint
Ensures that all values in a column are distinct (no duplicates).

CREATE TABLE student (
    phonenbr INT UNIQUE
);
-- Inserts unique phone numbers
INSERT INTO student VALUES (123), (456);

✅ 2. NOT NULL Constraint
Ensures a column cannot be left empty (NULL values not allowed).

CREATE TABLE student1 (
    age INT,
    rollno INT NOT NULL
);
-- Valid: rollno is NOT NULL
INSERT INTO student1 VALUES (23, 123);

✅ 3. CHECK Constraint
Applies a condition that each value in the column must satisfy.

CREATE TABLE student2 (
    age INT CHECK(age > 18)
);
-- Valid: 19 > 18
INSERT INTO student2 VALUES (19);

✅ 4. DEFAULT Constraint
Automatically assigns a default value to a column if no value is specified.

CREATE TABLE student3 (
    schoolName VARCHAR(50) DEFAULT 'RLB',
    age INT
);
-- Only age is given, schoolName will be set to default 'RLB'
INSERT INTO student3 (age) VALUES (23);

-- View inserted data
SELECT * FROM student3;

✅ 5. PRIMARY KEY Constraint
Uniquely identifies each row. It combines UNIQUE + NOT NULL. Only one per table.

CREATE TABLE student4 (
    age INT,
    rollNo INT PRIMARY KEY
);
-- All rollNo values must be unique and not null
INSERT INTO student4 VALUES (12,1), (13,2), (14,3), (15,5), (16,6);

-- View data
SELECT * FROM student4;

✅ 6. FOREIGN KEY Constraint
Establishes a relationship between two tables by referencing the primary key of another table.

CREATE TABLE course (
    courseName VARCHAR(50),
    rollNo INT,
    FOREIGN KEY (rollNo) REFERENCES student4(rollNo)
);
-- Inserting data with rollNo values that exist in student4
INSERT INTO course VALUES ('DBMS', 1), ('OS', 2);

-- View data
SELECT * FROM course;

🧠 Foreign Key in SQL
➤ A foreign key creates a relationship between two tables.
➤ It ensures that the value in the child table exists in the parent (referenced) table.

✅ Syntax:
CREATE TABLE childTableName (
    childId INT PRIMARY KEY,
    baseId INT,
    FOREIGN KEY (baseId) REFERENCES baseTableName(baseId)
);
🔍 Purpose:
➤ Enforces referential integrity
➤ Helps in JOIN operations between tables

🌊 Cascading in Foreign Keys
Cascading options define how changes in the parent table affect the child table.

✅ 1. CASCADE
If a row in the parent is updated/deleted → same action is done on the child.
Syntax:
FOREIGN KEY (baseId) REFERENCES baseTable(baseId)
    ON DELETE CASCADE
    ON UPDATE CASCADE

✅ 2. SET NULL
If parent row is updated/deleted → sets foreign key in child table to NULL.
Syntax:
FOREIGN KEY (baseId) REFERENCES baseTable(baseId)
    ON DELETE SET NULL
    ON UPDATE SET NULL

✅ 3. RESTRICT / NO ACTION
Prevents parent row from being deleted/updated if it has referencing rows in the child.
Syntax:
FOREIGN KEY (baseId) REFERENCES baseTable(baseId)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT

🧪 Example:
🔹 Parent Table
CREATE TABLE baseTable (
    baseId INT PRIMARY KEY,
    baseName VARCHAR(50)
);

INSERT INTO baseTable VALUES (1, 'Alpha'), (2, 'Beta');

🔹 Child Table with CASCADE
CREATE TABLE childTable (
    childId INT PRIMARY KEY,
    baseId INT,
    FOREIGN KEY (baseId) REFERENCES baseTable(baseId)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

INSERT INTO childTable VALUES (101, 1), (102, 2);

🔹 Deleting a row in baseTable:
DELETE FROM baseTable WHERE baseId = 1;

⚠️ This will also delete the row in childTable where baseId = 1 because of ON DELETE CASCADE.


🧠 Understanding Where clause in SQL





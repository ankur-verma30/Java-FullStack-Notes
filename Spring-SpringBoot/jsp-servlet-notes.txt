Step 1: Install Tomcat
-> Tomcat is a application server
-> Application server is responsible to run Servlet, JSP etc

a. Go to Official Website of Tomcat: https://tomcat.apache.org/download-90.cgi
b. Click on tomcat 10 link
c. Under Binary Distribution>>Download Zip file: https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.40/bin/apache-tomcat-10.1.40.zip
d. Copy the download the ZIP file and paste that into newly created folder tomcat-10 (G: or D:)
e. Open eclipse and go to server tab>>Click on the link no servers are available>>Go to Apache >> Click on tomcat 10.1>.Click on next button>>Browse and select tomcat path till you see bin(Exclude bin folder)
Example: G:\tomcat - 10\apache-tomcat-10.1.40
f. Under JRE Select 21
g. Click on finish

Steps to Delete Tomcat
#######################
Step 1: Stop tomcat from server tab
Step 2: Right click on tomcat entry in server tab and select delete option
Step 3: After Deleting again click on No Servers are available link present inside server tab
Step 4: Go to server tab>>Click on the link no servers are available>>Go to Apache >> Click on tomcat 10.1
Step 5: Click on Configure run time environments
Step 6: Select tomcat entry and click on remove button
Step 7: Click on apply and close
Step 8: Click on cancel button

Create First HTML page
##############################
Step 1 : Create Dynamic web project
Go to File>>New >> Other>> type dynamic web project>>Click on next button
Step 2: Give your project a name: web_app_1
Step 3: Select dynamic web module version(5 or 6 or 4) depending on your laptop OS + Hardware
Step 4: Click on finish
Step 5: go to web_app_1>>src>>webapp or webcontent>>create index.html page>>Click on finish

‚úÖ What are Servlets?
A Servlet is a server-side Java class that handles HTTP requests and generates dynamic responses, usually in the form of HTML.

Servlets are Java programs (classes) that run on a Java-enabled web server (like Tomcat) and act as the middle layer between client requests (like HTML forms, JSPs) and backend processing (like databases or business logic).

‚úÖCode Example-1
 Make html page interact with backend java code
index.html
----------
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" /></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>
		</form>
	</body>
</html>

üü© 1. index.html ‚Äî The Frontend (Form UI)
This HTML form:
‚û§ Sends form data to the server.
‚û§ Uses POST method (meaning data is sent in the body, not URL).
‚û§ Triggers the RegistrationServlet because of the action="saveReg".

üß† How does it map?
The form‚Äôs action="saveReg" ‚Üí Maps to @WebServlet("/saveReg") in your Java servlet.

üìå Missing Names in Input Fields
Your inputs are currently like:

<input type="text" />
‚ùå This will not send any data because the inputs are missing name attributes.

‚úÖ Fix: Add name attributes
<input type="text" name="name" />
<input type="text" name="emailId" />
<input type="text" name="mobile" />

‚úÖ@WebServlet("/saveReg") Annotation:
This annotation tells the servlet container (like Tomcat) to map this servlet to the /saveReg path, which is the same as the form‚Äôs action.

üî∏ Servlet Class Lifecycle
‚û§ It extends HttpServlet, which lets it handle doGet() and doPost() requests.
‚û§ It gets triggered when a client sends a request.

RegistrationServlet.java
-------------------------
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public RegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

Class.forName(...) is a Java reflection method that:
‚û§ Loads the class into memory.
‚û§ Executes any static blocks inside that class.
‚û§ "com.mysql.cj.jdbc.Driver" is the fully qualified class name of the MySQL JDBC driver.

‚û§ This line is used in JDBC (Java Database Connectivity) to load the database driver class dynamically at runtime.

üîπ doGet() Method
‚û§ Runs when the form or browser sends a GET request to /saveReg
‚û§ Currently just prints "get" to the server console

üîπ doPost() Method
‚û§ Runs when the form submits via method="post"
‚û§ Currently just prints "post" to the console

‚û§ Later, you can extract data like:
String name = request.getParameter("name");

‚úÖ Interaction Flow Summary
| Step | What Happens                                                     |
| ---- | ---------------------------------------------------------------- |
| 1.   | User fills form on `index.html`                                  |
| 2.   | User clicks **Submit**, browser sends POST request to `/saveReg` |
| 3.   | Tomcat checks for a matching servlet path                        |
| 4.   | It finds `@WebServlet("/saveReg")` and runs the servlet          |
| 5.   | Because it's a POST, `doPost()` is called                        |
| 6.   | `System.out.println("post");` logs in server console             |

‚úÖ Final Enhancement Idea
To receive the data and send a response back:

protected void doPost(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
	String name = request.getParameter("name");
	String email = request.getParameter("emailId");
	String mobile = request.getParameter("mobile");

	System.out.println("Name: " + name);
	System.out.println("Email: " + email);
	System.out.println("Mobile: " + mobile);

	response.setContentType("text/html");
	response.getWriter().println("<h2>Thank you, " + name + ". Registration successful!</h2>");
}

Example 2: Servlet should read form data
-----------------------------------------
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" name="name"/></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>
		</form>
	</body>	
</html>

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public RegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String name = request.getParameter("name");
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");
		System.out.println(name);
		System.out.println(email);
		System.out.println(mobile);
	}

}
When submitted, browser sends form data as key-value pairs:
name=Ankur&emailId=ankur@example.com&mobile=1234567890

üîß doPost() Method
üîç What happens here:
request.getParameter("name") extracts the value of the <input name="name" />.
Similarly for emailId and mobile.

‚úÖ Example Output on Console (Server side):
Ankur
ankur@example.com
1234567890

Example 3: Save Data into database using servlets after reading form data

index.html
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Registration</title>
	</head>
	<body>
		<h2>Registration Page</h2>
		<form	action="saveReg" method="post">
			<table>
				<tr>
					<td>Name</td>
					<td><input type="text" name="name"/></td>
				</tr>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="save" /></td>
				</tr>
			</table>	
		</form>		
	</body>
</html>

RegistrationServlet.java
üîê Use PreparedStatement instead of Statement to prevent SQL injection.
üõ°Ô∏è Return response message to the client (not just print in server logs).

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

@WebServlet("/saveReg")
public class RegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public RegistrationServlet() {
		super();
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Read form data
		String name = request.getParameter("name");
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");

		// Set response type
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();

		try {
			// Load JDBC driver
			Class.forName("com.mysql.cj.jdbc.Driver");

			// Connect to DB
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb", "root", "test");

			// Use PreparedStatement
			String sql = "INSERT INTO student (name, email, mobile) VALUES (?, ?, ?)";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, name);
			ps.setString(2, email);
			ps.setString(3, mobile);

			// Execute and confirm insertion
			int rows = ps.executeUpdate();

			if (rows > 0) {
				out.println("<h2>Registration Successful!</h2>");
			} else {
				out.println("<h2>Registration Failed. Please try again.</h2>");
			}

			// Close resources
			ps.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
			out.println("<h2>Error occurred: " + e.getMessage() + "</h2>");
		}
	}
}

Example 4 - Delete Data from Database
########################################
delete_registration.html

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>Delete Registration</title>
	</head>
	<body>
		<h2>Delete Registration Page</h2>
		<form	action="deleteReg" method="post">
			<table>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="delete" /></td>
				</tr>
			</table>
		</form>
	</body>	
</html>

DeleteRegistration.java

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@WebServlet("/deleteReg") //Submits the form to /deleteReg (mapped to the servlet).
public class DeleteRegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public DeleteRegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String email = request.getParameter("emailId");
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();

			//‚úÖCreates a SQL DELETE query that deletes the student whose email matches the input.
			stmnt.executeUpdate("Delete From student where email='"+email+"'");
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

üî¥ Security Note: This is vulnerable to SQL Injection. It's better to use PreparedStatement instead of createStatement.

‚ö†Ô∏è Recommended Improvements (for Production)

‚úÖ Use PreparedStatement to prevent SQL Injection:
PreparedStatement ps = con.prepareStatement("DELETE FROM student WHERE email = ?");
ps.setString(1, email);
ps.executeUpdate();

‚úÖ Add response output or redirect after deletion:
response.getWriter().println("Record deleted successfully.");

‚úÖ Add input validation: Check if email is empty or null.

Example 5- Update a student‚Äôs mobile number using their email ID as the identifier.

update_registration.html

<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>update Registration</title>
	</head>
	<body>
		<h2>Update Registration Page</h2>
		<form	action="updateReg" method="post">
			<table>
				<tr>
					<td>Email</td>
					<td><input type="text" name="emailId"/></td>
				</tr>
				<tr>
					<td>Mobile</td>
					<td><input type="text" name="mobile"/></td>
				</tr>
				<tr>
					<td><input type="submit" value="update" /></td>
				</tr>
			</table>
		</form>
	</body>		
</html>

‚û§ This sends the form data (email + new mobile number) to the updateReg servlet via a POST request.
1. emailId: Acts as the unique identifier (like a primary key).
2. mobile: New mobile number that will replace the old one in the database.

UpdateRegistrationServlet.java
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

@WebServlet("/updateReg") //Maps the servlet to the /updateReg endpoint.
public class UpdateRegistrationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
   
    public UpdateRegistrationServlet() {
        super();
    }
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("get");
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//Retrieves the email and new mobile number submitted via the HTML form.
		String email = request.getParameter("emailId");
		String mobile = request.getParameter("mobile");
		try {
			//Database Logic
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();

			//‚úÖ Updates the mobile number for the student whose email matches.
			stmnt.executeUpdate("update student set mobile='"+mobile+"' where email='"+email+"'");
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
‚úÖ Output
‚û§ If a student with the given email exists ‚Üí their mobile number will be updated.
‚û§ If not ‚Üí the query will affect 0 rows silently.

üîê Important Notes (for Real Projects)
üî∏ Use PreparedStatement to Prevent SQL Injection
Replace:
Statement stmnt = con.createStatement();
stmnt.executeUpdate("UPDATE student SET mobile='"+mobile+"' WHERE email='"+email+"'");

With:
PreparedStatement ps = con.prepareStatement("UPDATE student SET mobile=? WHERE email=?");
ps.setString(1, mobile);
ps.setString(2, email);
ps.executeUpdate();

üî∏ Validate Inputs
Check if email or mobile is null or empty before executing the update.

üî∏ Add Response
You may send a confirmation back:
response.getWriter().println("Mobile number updated successfully for: " + email);

Example 6:Running directly servlet
When we run a servlet , get method of servlet will get executed

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Get");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}

}
Output: Get


Example 9:Write data from servlet to html
-----------------------------------------

Note: 
-> use repsonse.getWriter() for writing data to html
PrintWriter out = repsonse.getWriter(); //------> Will give out reference using which we can write content to html

package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		out.println("hello");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

üîπ What's happening?

1. Servlet Mapping:
The annotation @WebServlet("/readReg") means this servlet is mapped to the URL path /readReg.

2. Request Type:
‚û§ When you type the URL directly into the browser (like http://localhost:8080/yourApp/readReg) and press Enter, the browser sends a GET request.
‚û§ This triggers the doGet() method.

3. Inside doGet():
System.out.println("Get");

‚û§ This prints "Get" to your server console (not the browser).
‚û§ So if you're checking the terminal or server logs (e.g., in Eclipse or IntelliJ console), you‚Äôll see: Get

üß™ How to test doPost()?
‚û§ To trigger the doPost() method, you must send a POST request, like through an HTML form:

<form action="readReg" method="post">
    <input type="submit" value="Submit via POST"/>
</form>

‚û§ When this form is submitted, the browser sends a POST request to /readReg, and you'll get: post

Note: If you want the output to appear in the browser (not just console), you need to use:
response.getWriter().println("Hello from servlet!");

Example 7: Read data from database and display that as a table in html

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

@WebServlet("/readReg")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public ReadRegistration() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		response.setContentType("text/html");
		out.println("<table border=1>");
		out.println("<tr>");
		out.println("<th>");
		out.println("Name");
		out.println("</th>");
		out.println("<th>");
		out.println("Email Id");
		out.println("</th>");
		out.println("<th>");
		out.println("Mobile");
		out.println("</th>");
		out.println("</tr>");
		
		//JDBC Code to read data from database
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/psadb","root","test");
			
			Statement stmnt = con.createStatement();
			ResultSet result = stmnt.executeQuery("Select * from student");
			
			while(result.next()) {
				out.println("<tr>");
				out.println("<td>");
				out.println(result.getString(1));
				out.println("</td>");
				out.println("<td>");
				out.println(result.getString(2));
				out.println("</td>");
				out.println("<td>");
				out.println(result.getString(3));
				out.println("</td>");
				out.println("</tr>");
			}
		
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		out.println("</table>");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post");
	}
}

‚úÖ Expected HTML Output in Browser:
You will see a table like:
+------+------------------+--------+
| Name | Email Id         | Mobile |
+------+------------------+--------+
| John | john@mail.com    | 123456 |
| Amy  | amy@email.com    | 789012 |
+------+------------------+--------+

‚úÖ Close resources:
Add finally block to safely close ResultSet, Statement, and Connection.

finally {
    try { result.close(); } catch(Exception e) {}
    try { stmnt.close(); } catch(Exception e) {}
    try { con.close(); } catch(Exception e) {}
}

‚úÖ JSP - JavaServer 

‚û§ JSP stands for JavaServer Pages.
‚û§ It is a server-side technology used to create dynamic web content using Java.
‚û§ It allows embedding Java code inside HTML pages, making it easier for developers to write dynamic web pages.

üîπ Key Points:
‚û§ JSP is an extension of Servlet technology.
‚û§ JSP files are saved with .jsp extension.
‚û§ During execution, JSP is converted into a Servlet by the server internally.

üîπ Why Use JSP?
‚û§ Mixes HTML and Java logic, unlike Servlets which are purely Java.
‚û§ Easy for frontend + backend integration.
‚û§ Reduces the complexity of HTML generation in Servlets (no need for out.println() for every tag).

üîπ How JSP Works (Lifecycle):
‚û§ JSP File ‚Üí Servlet: JSP is converted into a Servlet.
‚û§ Compilation: The Servlet is compiled into .class.
‚û§ Execution: JVM executes the class and sends output as HTML to the client.

üß† JSP Tags
‚úÖ scriptlet tag
A scriptlet in JSP allows us to embed raw Java code directly inside HTML.

üîπ Characteristics:
‚û§ The code inside <% ... %> is placed inside the _jspService() method when the JSP is converted to a servlet.
‚û§ You can declare variables, loops, conditionals, method calls, etc.
‚û§ Cannot declare methods (use <%! ... %> for that).
‚û§ Has access to implicit objects.

Example 1: registration_page.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%
		for(int i=0;i<5;i++){
			System.out.println(i);
		}
	%>
</body>
</html>

‚û§ ‚ö†Ô∏è System.out.println(i); will not print in the browser, it prints to the server console.
‚û§ ‚úÖ Use out.println(...) to display on the browser.

üîπ Best Practice:
	<%
		for(int i=0;i<5;i++){
			out.println(i);
		}
	%>

‚úÖ What is an Implicit Object in JSP?
‚û§ Implicit Objects are predefined objects that are automatically available in every JSP page without needing to declare or create them.

‚û§ They are provided by the JSP container (like Apache Tomcat), and they allow you to access key parts of the HTTP request/response lifecycle, like session data, output to browser, application context, etc.

üîπ Available Implicit Objects in Scriptlet:
| Object        | Description                               |
| ------------- | ----------------------------------------- |
| `out`         | Used to send output to client (browser)   |
| `request`     | Represents HTTP request                   |
| `response`    | Represents HTTP response                  |
| `session`     | Session between client and server         |
| `application` | ServletContext shared across app          |
| `config`      | ServletConfig object for current page     |
| `pageContext` | Provides access to all JSP scoped objects |
| `exception`   | Available in error pages only             |
| `page`        | This JSP page (like `this`)               |

üö´ Why Can't We Use:
1. Access specifier inside the scriptlet tag.
2. static / non static variables
3. create methods inside scriptlet tag

‚úÖExample:
    <%
		public int x; // ‚ùå Error
		public void test(){ // ‚ùå Error
		}
	%>

	The JSP engine translates your JSP page into a Servlet class, like this:

	public class SomeJspServlet extends HttpServlet {
    public void _jspService(...) {
        // your scriptlet code goes here
        public int x;  // ‚ùå Not allowed inside method
        public void test() {}  // ‚ùå Can't define a method inside another method
    }
}

üß† In Java, you can't declare access modifiers (public, private, etc.) or define methods inside other methods. That‚Äôs why the above gives a compile-time error.

Note: Only local variable can be created inside scriptlet
Because scriptlet code is inserted inside a method, not at the class level.
‚úÖExample:
	<%
		int x=10;//------>Local Variable
		out.println(x);
		
	%>

Note: We cannot write html code inside scriptlet tag

‚úÖ Declaration Tag in JSP
Syntax: <%! ... %>

Used to declare:
1. Variables (static/non-static)
2. Methods
3. Anything you would normally write at class level in Java

üîç Key Rules for Declaration Tag
| Feature                     | Allowed in Declaration Tag? |
| --------------------------- | --------------------------- |
| `public static` or `public` | ‚úÖ Yes                       |
| Implicit objects like `out` | ‚ùå No                        |
| HTML code                   | ‚ùå No                        |
| Java methods                | ‚úÖ Yes                       |
| Class-level variables       | ‚úÖ Yes                       |


Example 1:
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%! 
    public static int y = 100;       // static variable
    public int x = 10;               // instance variable
    public String test() {           // method
        return "hello";
    }
%>

<%
    out.println(y);        // ‚úÖ prints 100
    out.println(x);        // ‚úÖ prints 10
    out.println(test());   // ‚úÖ prints hello
%>

</body>
</html>

‚úîÔ∏è Behind the Scenes (What JSP Compiles To):

public class YourJspPage extends HttpServlet {

    public static int y = 100;
    public int x = 10;

    public String test() {
        return "hello";
    }

    public void _jspService(HttpServletRequest request, HttpServletResponse response) {
        JspWriter out = response.getWriter();
        out.println(y);
        out.println(x);       // accesses instance variable
        out.println(test());  // calls instance method
    }
}

üß† Important Notes
‚û§ out, request, response, etc. are not available in <%! %> ‚Äî they exist only in <% %> (scriptlet) or inside the _jspService() method.
‚û§ You can access the declared variables/methods from scriptlet or expression tags, like in your example.
‚û§ HTML is NOT allowed inside <%! %> ‚Äî it will throw an error because it's compiled as Java code.


‚úÖ Expression Tag in JSP
üîπ Syntax: <%= expression %>

üîπ Purpose:
‚û§ It evaluates a Java expression and prints the result to the HTML response (webpage).
‚û§ Here we can write only one statement

‚ùó Common Mistakes to Avoid
‚û§ Ending the expression with a semicolon (;) ‚Üí ‚ùå will cause a syntax error.
<%= x; %>   // ‚ùå Wrong
<%= x %>    // ‚úÖ Correct

‚û§ Using statements like loops/conditions ‚Üí ‚ùå not allowed.
<%= for(int i=0; i<5; i++) {} %> // ‚ùå Wrong

üîç Key Features
| Feature                      | Explanation                                                                          |
| ---------------------------- | ------------------------------------------------------------------------------------ |
| No LHS (Left-hand side)  | You're not assigning ‚Äî you're just evaluating and printing directly to the response. |
| Output goes to browser   | The result is added to the `HttpServletResponse` via `JspWriter out`.                |
| No semicolon          | Only expressions are allowed, not full Java statements.                              |
| Implicit objects allowed | Yes, like `out`, `request`, `response`, etc.                                         |
| Auto converted           | It's internally converted into `out.print(...)`.                                     |

üß† Why No LHS?
‚û§ This tag is only for output.
‚û§ Think of it like System.out.print() ‚Äî but the destination is the browser (via the out object).
‚û§ You're not assigning values ‚Äî you're saying:
üëâ "Evaluate this expression, and show it to the user."

Example:
--------
	<%!
		public static int y=100;
		public int x=10;
		public String test(){
			return "hello";
		}
		
	%>
	
	<%=x %>
	<%=y %>
	<%=test() %>

	Output in Browser:
	10
	100
	hello

üîß What JSP Converts This To (Internally):
out.print(x);        // instance variable
out.print(y);        // static variable
out.print(test());   // method call

üß† Directive tag
Syntax: <%@ directive attribute="value" %>

üîπ Purpose:
The directive tag is used to give global-level instructions to the JSP engine before the actual content is processed.

üî∏ Types of Directive Tags
| Type      | Purpose                                                               |
| --------- | --------------------------------------------------------------------- |
| `page`    | Set page-level instructions (language, import, buffer, session, etc.) |
| `include` | Include contents of another file at compile-time                  |
| `taglib`  | Used when working with custom tag libraries (e.g., JSTL)              |

Example 1:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ page import="java.util.Date" %>
<%@ page import="java.util.ArrayList" %> //class import
<%@ include file="test1.txt" %> //file import
<%@ taglib prefix="prefixName" uri="taglibURI" %> //import custom tags or JSTL

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<%=new Date() %>
	<% 
	ArrayList<Integer> arr = new ArrayList();
	%>

</body>
</html>


üß†Injecting HTML code in JSP code
menu.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<a href="">create registration</a>
	<a href="">List registration</a>
	<a href="">logout</a>
</body>
</html>
‚ö†Ô∏è The menu.html already has <html>, <head>, and <body> tags, which will conflict with those in the JSP file. This can lead to invalid HTML structure in the final output. 

Instead of putting full HTML structure in menu.html, do this:
menu.html

<nav>
	<a href="registration_page.jsp">Create Registration</a>
	<a href="list_registration.jsp">List Registration</a>
	<a href="logout.jsp">Logout</a>
</nav>

This way, you can safely include it inside your JSPs:
<body>
	<%@ include file="menu.html" %>
	<h1> Register </h1>
</body>

‚û§ The line <%@ include file="menu.html" %> imports the HTML content from menu.html at compile-time (also called static include).
‚û§ So, when the JSP is compiled, the content of menu.html is copied and pasted at the top of the JSP.
‚û§ It's better if menu.html only contains the <nav> or menu part, not the full HTML skeleton.

First we have inserted HTML code inside the JSP page now doing vice-versa:

üß† What We‚Äôre Doing:
You are putting links to JSP pages (registration.jsp, list_registration.jsp, logout.jsp) directly inside an HTML file (menu.html). This file is then included in JSP pages for furthur feature Enhancements.

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Registration Form</title>
</head>
<body>
	<a href="registration.jsp">create registration</a>
	<br/>
	<a href="list_registration.jsp">List registration</a>
	<br/>
	<a href="logout.jsp">logout</a>
</body>
</html>

üîç Behind the Scenes (How It Works):

At Compile-Time:
The JSP engine replaces this line:
<%@ include file="menu.html" %>
‚û§ With the full HTML content of menu.html.
‚û§ So it‚Äôs as if that HTML was written directly in the JSP.

At Run-Time:
‚û§ The browser reads the full HTML output of the JSP page (which now contains the menu).
‚û§ When the user clicks a link like <a href="list_registration.jsp">, it sends an HTTP request to the server for that JSP.
‚û§ The server compiles/executes that JSP, includes menu.html again, and returns the new page.

‚úÖ Final Project Structure (Recommended)

project/
‚îú‚îÄ‚îÄ menu.html
‚îú‚îÄ‚îÄ registration.jsp
‚îú‚îÄ‚îÄ list_registration.jsp
‚îú‚îÄ‚îÄ logout.jsp

And in each JSP:
<%@ include file="menu.html" %>
This creates a proper reusable menu.

üî∑ Inter-Servlet Communication (ISC)
Inter-Servlet Communication refers to the process of calling one servlet from another servlet, or even calling a JSP page from a servlet.

‚úÖ Why Use It:
‚û§ To reuse logic written in another servlet
‚û§ To redirect or forward to another resource (servlet or JSP) as part of modular application flow
‚û§ Helps build project flow based on business logic, especially in multi-step processes (e.g., login ‚Üí dashboard ‚Üí data processing)

‚úÖ Ways to Achieve Inter-Servlet Communication:

1. Using RequestDispatcher (Most Common Way)
Forward the request from one servlet to another.
‚úÖCode:
RequestDispatcher rd = request.getRequestDispatcher("SecondServlet");
rd.forward(request, response); // Control moves to SecondServlet

Can also forward to a JSP:
‚úÖCode
RequestDispatcher rd = request.getRequestDispatcher("result.jsp");
rd.forward(request, response);

Purpose: Server-side forward; client doesn‚Äôt know the change in control.

2. Using sendRedirect()
‚úÖCode
response.sendRedirect("SecondServlet");
‚û§ Sends a response to the browser telling it to make a new request to SecondServlet.
‚û§ Purpose: Client-side redirect; new request is created.

3. Using ServletContext.getRequestDispatcher()
Used when dispatching to a resource outside the current context path.
‚úÖCode
ServletContext context = getServletContext();
RequestDispatcher rd = context.getRequestDispatcher("/SecondServlet");
rd.forward(request, response);

‚úÖ Key Differences: forward() vs sendRedirect()
| Feature        | `forward()`               | `sendRedirect()`                 |
| -------------- | ------------------------- | -------------------------------- |
| Request type   | Single request            | New request                      |
| URL in browser | Not changed               | Changed                          |
| Performance    | Faster (server-side)      | Slower (extra round-trip)        |
| Scope          | Shares request attributes | Doesn‚Äôt share request attributes |

‚úÖ Example Flow:
‚û§ LoginServlet ‚Üí validates login
‚û§ On success ‚Üí forwards to DashboardServlet
‚û§ DashboardServlet ‚Üí forwards to welcome.jsp

‚úÖExample 1: Calling get method of second servlet from first servlet
Make the method in the form of first.html as get

first.html file
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
		<form action="first" method="get">
			<input type="submit"/>
		</form>
</body>
</html>

‚ùóFirstServlet.java file

package p1;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/first")
public class FirstServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public FirstServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//Will Point to second Servlet
		RequestDispatcher rd = request.getRequestDispatcher("second");
		rd.forward(request, response);
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
}

‚úÖSecondServlet.java file
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/second")
public class SecondServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public SecondServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Second Servlet get method");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
}

üß≠ Flow Explanation:
üîπ Step 1: User requests /first
FirstServlet.doGet() is called

Inside it:
RequestDispatcher rd = request.getRequestDispatcher("second");
rd.forward(request, response);

This forwards the same request and response objects to /second (i.e., SecondServlet).

üîπ Step 2: SecondServlet.doGet() executes
Since forward() is used, the control moves server-side, and SecondServlet's doGet() method is executed.

It prints:
System.out.println("Second Servlet get method");

So on your server console, you‚Äôll see: Second Servlet get method

‚úÖ The browser still thinks it is on /first, because forward() is server-side and does not change the browser URL.

‚úÖ Summary
| Action                            | What happens                              |
| --------------------------------- | ----------------------------------------- |
| User visits `/first`              | FirstServlet is triggered                 |
| FirstServlet forwards to `second` | `SecondServlet`'s `doGet()` is executed   |
| URL stays as `/first`             | Because `forward()` does **not redirect** |
| Console output                    | `Second Servlet get method`               |

‚úÖ Diagram (Visual)
Browser ‚Üí [ /first ] ‚Üí FirstServlet 
                          ‚Üì
                  RequestDispatcher.forward()
                          ‚Üì
                     SecondServlet ‚Üí console output


‚úÖExample 2: Calling post method of second servlet from first servlet
Make the method in the form of first.html as post
Similar to the get method 

‚ùófirst.html file

		<form action="first" method="post">
			<input type="submit"/>
		</form>


‚úÖFirstServlet.java file

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//Will Point to second Servlet
		RequestDispatcher rd = request.getRequestDispatcher("second");
		rd.forward(request, response);
	}

‚úÖSecondServlet.java

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Second Servlet post method");
	}

üß†Example 3: Supply data from html form to first servlet and then from first servlet supply data to second servlet using request.setAttribute()

‚úÖ GOAL:
‚û°Ô∏è Take name input from an HTML form
‚û°Ô∏è Send it to FirstServlet using POST
‚û°Ô∏è FirstServlet passes the name to SecondServlet via request.setAttribute()
‚û°Ô∏è SecondServlet reads it using request.getAttribute() and prints it

üß≠ STEP-BY-STEP FLOW:
üîπ 1. HTML Form: form.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<form action="first" method="post">
		<input type="text" name="name"/>
		<input type="submit" />
	</form>
</body>
</html>

When the user submits the form:
‚û§ A POST request is sent to FirstServlet (/first)
‚û§ The name field is sent as a parameter

üîπ 2. FirstServlet.java
package p1;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/first")
public class FirstServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public FirstServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		RequestDispatcher rd = request.getRequestDispatcher("second");
		rd.forward(request, response);
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String name=request.getParameter("name");
		request.setAttribute("x", name);
		
		RequestDispatcher rd=request.getRequestDispatcher("second");
		rd.forward(request, response);
	}
}
‚û§ Extracts the form value using getParameter()
‚û§ Stores it as an attribute named "x"
‚û§ Forwards the request to /second (SecondServlet)
‚û§ Because forward() is used, the same request and response are passed forward

üîπ 3. SecondServlet.java
package p1;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/second")
public class SecondServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public SecondServlet() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("Second Servlet get method");
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String name=(String)request.getAttribute("x");
		System.out.println(name);
	}
}
‚û§ It retrieves the attribute "x" from the request
‚û§ Prints the value to the server console

üîç Output
Suppose user enters: Ankur
Console output will be:
Ankur

‚úÖ Success ‚Äî you successfully passed form data from one servlet to another using request.setAttribute() and RequestDispatcher.forward().

‚úÖ Visual Summary:
form.html
   |
   |--> POST /first
             |
             |--> FirstServlet:
             |     - getParameter("name")
             |     - setAttribute("x", name)
             |     - forward --> /second
                           |
                           |--> SecondServlet:
                                 - getAttribute("x") => prints name

üí° Tip:
You can also display the value on a JSP instead of printing to the console:

In SecondServlet.java:

request.setAttribute("name", name);
request.getRequestDispatcher("welcome.jsp").forward(request, response);

In welcome.jsp:
<p>Welcome, ${name}!</p>
Let me know if you want this example extended to JSP display.

üß†Example 4:üîÅ Servlet forwarding data to a JSP using the request implicit object.

üîç What is happening here?
1. First.java ‚Äì Servlet
This servlet is mapped to /first.

First.java
---------
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/first")
public class First extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public First() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//rd points to jsp page
		request.setAttribute("x", "mike");
		
		
		RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
		rd.forward(request, response);
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

}
When a user accesses /first, the doGet() method executes.

Inside doGet():
request.setAttribute("x", "mike");
‚úÖ This line stores the value "mike" in the request scope with the key "x".

Then:
RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
rd.forward(request, response);
‚úÖ This forwards the request (with its data) to index.jsp.

2. index.jsp ‚Äì JSP Page

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>Index page</h2>
	<%
		out.println((String)request.getAttribute("x"));
	%>
</body>
</html>

Receives the request along with the attribute x set earlier.
This line:
out.println((String)request.getAttribute("x"));
‚úÖ Fetches the value of x from the request (which is "mike") and prints it on the browser.

‚úÖ MVC Architecture ‚Äì Java Web Application (Servlet + JSP)
üß© MVC Stands for:
‚û§ M ‚Äì Model: Business logic and data layer
‚û§ V ‚Äì View: User interface (JSP, HTML)
‚û§ C ‚Äì Controller: Logic that handles incoming requests and routes data (Servlet)

üí° Why Use MVC?
‚û§ Separation of concerns: Cleaner, maintainable code.
‚û§ Reusable components.
‚û§ Easier to debug and test.

üîÅ Data Flow in MVC:
[User] 
   ‚Üì (enters data in form)
[View (JSP)] 
   ‚Üì (form submit)
[Controller (Servlet)] 
   ‚Üì (calls logic)
[Model (Java Class)]
   ‚Üì (returns result)
[Controller]
   ‚Üì (forwards result)
[View (JSP)]
   ‚Üì 
[User sees result]


üß™ Practical Example ‚Äì Add Two Numbers (MVC)
üñºÔ∏è 1. View: add.jsp

<form action="add" method="post">
    Number 1: <input type="text" name="num1" /><br>
    Number 2: <input type="text" name="num2" /><br>
    <input type="submit" value="Add" />
</form>

üéÆ 2. Controller: AddController.java

@WebServlet("/add")
public class AddController extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int num1 = Integer.parseInt(request.getParameter("num1"));
        int num2 = Integer.parseInt(request.getParameter("num2"));
        
        AddService service = new AddService();
        int result = service.add(num1, num2);
        
        request.setAttribute("result", result);
        RequestDispatcher rd = request.getRequestDispatcher("result.jsp");
        rd.forward(request, response);
    }
}

üß† 3. Model: AddService.java
public class AddService {
    public int add(int a, int b) {
        return a + b;
    }
}

üìÑ 4. View: result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" %>
<html>
<body>
    <h3>Result is: <%= request.getAttribute("result") %></h3>
</body>
</html>


‚úÖ EMS Project - Iteration 1 (Employee Management System)
üìö Objective:
To build a web-based Login Module where users can log in using their email and password, which are verified from a MySQL database.

üß± Tech Stack:
Frontend (View): JSP (index.jsp)
Controller: Servlet (LoginController.java)
Backend (Model): JDBC-based (DBService.java, DBServiceImpl.java)
Database: MySQL

‚öôÔ∏è Project Structure:
ems-project/
‚îú‚îÄ‚îÄ WebContent/
‚îÇ   ‚îî‚îÄ‚îÄ index.jsp              --> View (Login form)
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ com/
‚îÇ       ‚îî‚îÄ‚îÄ ems/
‚îÇ           ‚îú‚îÄ‚îÄ controller/
‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ LoginController.java   --> Controller
‚îÇ           ‚îî‚îÄ‚îÄ model/
‚îÇ               ‚îú‚îÄ‚îÄ DBService.java         --> Interface
‚îÇ               ‚îî‚îÄ‚îÄ DBServiceImpl.java     --> JDBC Logic
‚îî‚îÄ‚îÄ DB/
    ‚îî‚îÄ‚îÄ emsdb.sql              --> SQL setup for DB

üîÑ MVC Architecture Breakdown:
 View - index.jsp
‚û§ Collects user credentials
‚û§ Displays error messages using request.setAttribute("error", ...)

index.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>Login Here...</h2>
	<form action="login" method="post">
		<label>Email: </label> <input type="text" name="email" /> <br /> <label>Password:
		</label> <input type="password" name="password" /> <br /> <input
			type="submit" value="login" />
	</form>
	<%
	if (request.getAttribute("error")!=null) {
		out.println(request.getAttribute("error"));
	}
	%>
</body>
</html>

üîπ Controller - LoginController.java
‚û§ Acts as a mediator between JSP and Database.
‚û§ Gets form data using request.getParameter(...)
‚û§ Forwards to index.jsp on error.

package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

import com.ems.model.DBServiceImplementation;

@WebServlet("/login")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public LoginController() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String email = request.getParameter("email");
		String password = request.getParameter("password");

		DBServiceImplementation service = new DBServiceImplementation();
		service.connectDB();
		boolean status = service.verifyLogin(email, password);

		if (status) {
			RequestDispatcher rd = request.getRequestDispatcher("dashboard.jsp");
			rd.forward(request, response);
		} else {
			request.setAttribute("error", "Invalid email/password");
			RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
			rd.forward(request, response);
		}
	}
}

üîπShow dashboard.jsp on successfully login
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h2>Login Successful</h2>
	<h3>Welcome to the application</h3>
</body>
</html>

üîπ Model - DBService.java and DBServiceImpl.java
DBService.java ‚Äì Just the interface

public interface DBService {
	public void connectDB();
	public boolean verifyLogin(String email, String password);
}

DBServiceImpl.java ‚Äì Implements DB operations
package com.ems.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class DBServiceImplementation implements DBService {
	private Connection conn;
	private Statement stmnt;

	@Override
	public void connectDB() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/ems", "root", "ankur@1234");
			stmnt = conn.createStatement();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean verifyLogin(String email, String password) {
		try {
			ResultSet result = stmnt
					.executeQuery("select * from user where email='" + email + "' and password='" + password + "'");
			return result.next();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
}

üóÉÔ∏è Database Setup (MySQL)
CREATE DATABASE ems;
USE ems;

CREATE TABLE user (
  id INT PRIMARY KEY,
  username VARCHAR(45),
  name VARCHAR(45),
  email VARCHAR(128),
  password VARCHAR(20)
);

INSERT INTO user VALUES (1, "mike", "mike", "mike@gmail.com", "testing");
INSERT INTO user VALUES (2, "adam", "adam", "adam@gmail.com", "testing");

‚ö†Ô∏è Important Notes:
‚úÖ Don‚Äôt use Statement in real projects due to SQL Injection risk. Use PreparedStatement.
‚ùó Currently, password is stored in plain text ‚Äì not recommended for real-world applications.

############################
Project - ems - Iteration 2
############################
‚úÖ EMS Project - Iteration 2 (Employee Management System) Registration with Session Handling

‚û§ Now, we're extending the project:
‚û§ After login, users are redirected to a secured registration form.
‚û§ This form is inside /WEB-INF/views, only accessible through servlet (not directly from browser).
‚û§ Session variable is used to remember the user's identity.

‚úÖ New Table: registration
CREATE TABLE registration (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45),
  course VARCHAR(60),
  email VARCHAR(145),
  mobile VARCHAR(10),
  user_id INT
);

‚úÖ Workflow - Iteration 2
User logs in via index.jsp

‚û§ If login is successful:
‚û§ Email is stored in session:
session.setAttribute("email", email);

User is forwarded to:
/WEB-INF/views/registration.jsp
‚û§ This JSP page is protected (cannot be accessed directly by URL)

When registration form is submitted:
‚û§ RegistrationController is called
‚û§ It accesses the session to retrieve the user's email:

String email = (String) session.getAttribute("email");

‚úÖ Code Breakdown
üìÑ registration.jsp
This file is placed under WEB-INF/views

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<h2>Login Successfully</h2>
<form action="registrationController"></form>
</body>
</html>

Can only be opened via servlet, not directly

üîß Updated LoginController.java
package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;

import com.ems.model.DBServiceImplementation;

@WebServlet("/login")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public LoginController() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String email = request.getParameter("email");
		String password = request.getParameter("password");

		DBServiceImplementation service = new DBServiceImplementation();
		service.connectDB();
		boolean status = service.verifyLogin(email, password);

		if (status) {
			‚úÖUpdated Code Here....
			HttpSession session=request.getSession(true);
			session.setAttribute("email", email);
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/registration.jsp");
			rd.forward(request, response);
		} else {
			request.setAttribute("error", "Invalid email/password");
			RequestDispatcher rd = request.getRequestDispatcher("index.jsp");
			rd.forward(request, response);
		}
	}

}

üîß RegistrationController.java - Here Access Session variable

package com.ems.controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;

@WebServlet("/registrationController")
public class RegistrationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public RegistrationController() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		String email = (String)session.getAttribute("email");
	}
}

############################
Project - ems - Iteration 3
############################
‚úÖ EMS Project - Iteration 3 (Employee Management System)

To allow a logged-in user to create a registration record using a form (registration.jsp), and store that data in the database (registration table), associating it with the current user.

üîß Controller: RegistrationController.java
‚û§ Handles form submission from registration.jsp.
‚û§ Retrieves the logged-in user's email from the session (session.getAttribute("email")).
‚û§ Uses that email to fetch the user ID from the user table via model.
‚û§ Extracts form data (name, course, emailId, mobile) from request.
‚û§ Calls the Model (DBServiceImpl) to insert a registration entry in the registration table.
‚û§ Stores success message as request.setAttribute("message", ...).
‚û§ Forwards the request to the View (registration.jsp) using RequestDispatcher.

üìÑ View: registration.jsp
‚û§ A simple HTML form to input registration data.
‚û§ Submits the form to registrationController via POST.

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h2>Register here....</h2>
	<form action="registrationController" method="post">
		<pre>
			<label>Name: </label>
			<input type="text" name="name"/>
			<br/>
			<label>Course: </label>
			<input type="text" name="course"/>
			<br/>
			<label>Email: </label>
			<input type="text" name="email"/>
			<br/>
			<label>Mobile: </label>
			<input type="text" name="mobile"/>
			<br/>
			<input type="submit" value="register"/>
		</pre>
	</form>
	
	<%
		if(request.getAttribute("message")!=null){
			out.println(request.getAttribute("message"));
		}
	%>
</body>
</html>
‚û§ Displays a message (if any) returned by the controller using: RegistrationController

üí° Key Concepts Demonstrated

1. Session usage
HttpSession session = request.getSession(false);
String email = (String) session.getAttribute("email");
‚Üí Maintains login context and fetches user-specific data.

2. Request scope and forwarding
request.setAttribute(...): Passes data to the JSP.

RequestDispatcher.forward(...): Transfers control to JSP while preserving request data.

3. Form data handling
Retrieves input via request.getParameter(...).

4. MVC Architecture in Action
| Layer      | Component                | Role                                    |
| ---------- | ------------------------ | --------------------------------------- |
| View       | `registration.jsp`       | Shows form and feedback                 |
| Controller | `RegistrationController` | Receives form data, processes, forwards |
| Model      | `DBServiceImpl.java`     | Business logic and database interaction |

‚úÖ RegistrationController.java
Purpose:
This servlet handles the form submission logic, connects to the database, retrieves user info, and creates a new registration record.

üîß Key Components:
@WebServlet("/registrationController"):
Maps the servlet to the URL /registrationController.

doPost():
‚û§ Gets session to retrieve the logged-in user's email.
‚û§ Connects to DB using DBServiceImpl.
‚û§ Fetches user ID using getUserByEmail(email).
‚û§ Reads form data: name, course, emailId, mobile.
‚û§ Inserts registration record via createRegistration(...).
‚û§ Sends success message back to registration.jsp.

RegistrationController.java

package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.ResultSet;

import com.ems.model.DBServiceImpl;

@WebServlet("/registrationController")
public class RegistrationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public RegistrationController() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			HttpSession session = request.getSession(false);
			String email = (String)session.getAttribute("email");
			
			DBServiceImpl service = new DBServiceImpl();
			service.connectDB();
			ResultSet result = service.getUserByEmail(email);
			int userId = 0;
			if(result.next()) {
				userId = result.getInt(1);
			}
			String name = request.getParameter("name");
			String course = request.getParameter("course");
			String emailId = request.getParameter("email");
			String mobile = request.getParameter("mobile");
			
			service.createRegistration(name,course,emailId,mobile,userId);
			
			request.setAttribute("message", "Registration created");
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/registration.jsp");
			rd.forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

‚úÖ DBServiceImpl.java
Purpose:
Implements all database methods declared in DBService.

DBService.java

package com.ems.model;

import java.sql.ResultSet;

public interface DBService {
	public void connectDB();//->Connecting to database
	public boolean verifyLogin(String email, String password);
	public ResultSet getUserByEmail(String email);
	public void createRegistration(String name, String course, String emailId, String mobile, int userId);
}

üîß Important Implementations:
‚û§ connectDB()
1. Loads MySQL JDBC driver.
2. Connects to database emsdb.
3. Initializes Statement for SQL queries.

‚û§ verifyLogin(...)
Checks whether the email and password combination exists in the user table.

‚û§ getUserByEmail(email)
Queries the user table using the email to get user information (e.g., userId).

‚û§ createRegistration(...)
Inserts registration data (name, course, email, mobile, user_id) into registration table.

DBServiceImplementation.java

package com.ems.model;
import java.sql.*;
public class DBServiceImpl implements DBService {
	
	private Connection con;
	private Statement stmnt;
	

	@Override
	public void connectDB() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/emsdb","root","test");
			stmnt = con.createStatement();
		
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean verifyLogin(String email, String password) {
		try {
		 ResultSet result = stmnt.executeQuery("select * from user where email='"+email+"' and password='"+password+"'");
		 return result.next();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public ResultSet getUserByEmail(String email) {
		try {
			 ResultSet result = stmnt.executeQuery("select * from user where email='"+email+"'");
			 
			 return result;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
	}

	public void createRegistration(String name, String course, String emailId, String mobile, int userId) {
		try {
			stmnt.executeUpdate("INSERT INTO registration (name, course, email, mobile, user_id) VALUES ('"+name+"', '"+course+"', '"+emailId+"', '"+mobile+"', '"+userId+"')");
			} catch (Exception e) {
				e.printStackTrace();
			}
	}
}


############################
Project - ems - Iteration 4
############################
‚úÖ EMS Project - Iteration 4 (Employee Management System)

‚úÖ Objective of Iteration 4
Implement functionality to:
‚û§ Authenticate user via session.
‚û§ Allow logged-in users to:
‚û§ Create registrations.
‚û§ View only their own registrations.

üîß Updated DBService Interface
üìÅ DBService.java
New Method:
public ResultSet getRegistrationsByUser(int userId);
Purpose:
Fetch all registration records specific to a user (based on user_id foreign key).

‚úÖCode Implementation
DBService.java

package com.ems.model;

import java.sql.ResultSet;

public interface DBService {
	public void connectDB(); // Connection to the database
	public boolean verifyLogin(String email, String password);
	public ResultSet getUserByEmail(String email);
	public void createRegistration(String name,String course,String emailId,String mobile, int userId);
	public ResultSet getRegistrationsByUser(int userId);
	
}

üîß Implementation of Interface
üìÅ DBServiceImplementation.java

package com.ems.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class DBServiceImplementation implements DBService {
	private Connection conn;
	private Statement stmnt;

	@Override
	public void connectDB() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/ems", "root", "ankur@1234");
			stmnt = conn.createStatement();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean verifyLogin(String email, String password) {
		try {
			ResultSet result = stmnt
					.executeQuery("select * from user where email='" + email + "' and password='" + password + "'");
			return result.next();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public ResultSet getUserByEmail(String email) {
		try {
			ResultSet result=stmnt.executeQuery("select * from user where email='"+email+"'");
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void createRegistration(String name, String course, String emailId, String mobile, int userId) {
		try {
			stmnt.executeUpdate("insert into registration (name,course, email,mobile,user_id) values('"+name+"', '"+course+"', '"+emailId+"', '"+mobile+"', '"+userId+"')");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	@Override
	public ResultSet getRegistrationsByUser(int userId) {
	try {
		ResultSet result=stmnt.executeQuery("Select * from registration where user_id='"+userId+"'");
		return result;
	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
	}
}
Purpose:
This method executes SQL to fetch registrations for the currently logged-in user.

‚úÖ User Registration Creation and Listing Logic
üìÅ RegistrationController.java
üîπ doGet() ‚Äì Show Form

Purpose:
Loads the registration form when users visit the page directly.

package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.ResultSet;

import com.ems.model.DBServiceImplementation;

@WebServlet("/registrationController")
public class RegistrationController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
 
    public RegistrationController() {
        super();
        // TODO Auto-generated constructor stub
    }

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		RequestDispatcher rd=request.getRequestDispatcher("/WEB-INF/views/registration.jsp");
		rd.forward(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	try {
		HttpSession session=request.getSession(false);
		String email=(String)session.getAttribute("email");
		
		DBServiceImplementation service=new DBServiceImplementation();
		service.connectDB();
		
		ResultSet result=service.getUserByEmail(email);
		int userId=0;
		if(result.next()) {
			userId=result.getInt(1);
			
			String name=request.getParameter("name");
			String course=request.getParameter("course");
			String emailId=request.getParameter("email");
			String mobile=request.getParameter("mobile");
			
			service.createRegistration(name,course,emailId,mobile,userId);
			request.setAttribute("message", "Registered Successfully");
			RequestDispatcher rd=request.getRequestDispatcher("/WEB-INF/views/registration.jsp");
			rd.forward(request, response);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
 	}
}

üîπ doPost() ‚Äì Save Registration
‚û§ Fetches the current user's ID from the session.
‚û§ Creates a new record in the registration table for that user.

‚úÖ ReadRegistration.java
package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.ResultSet;

import com.ems.model.DBServiceImplementation;


@WebServlet("/readRegistration")
public class ReadRegistration extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
   
    public ReadRegistration() {
        super();
        // TODO Auto-generated constructor stub
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			HttpSession session=request.getSession(false);
			String email=(String )session.getAttribute("email");
			
			DBServiceImplementation service=new DBServiceImplementation();
			service.connectDB();
			
			ResultSet result=service.getUserByEmail(email);
			
			int userId=0;
			ResultSet registations=service.getRegistrationsByUser(userId);
			request.setAttribute("registrations", registations);
			RequestDispatcher rd=request.getRequestDispatcher("/WEB-INF/views/list_registrations.jsp");
			rd.forward(request, response);
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
	}
}

‚úÖPurpose:
‚û§ Uses session email to identify user.
‚û§ Fetches all registrations belonging to that user.
‚û§ Forwards the data to the JSP to be displayed.


‚úÖ menu.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Menu Card</title>
</head>
<body>
<a href="registrationController">Create registration</a>
	<a href="readRegistration">List registration</a>
</body>
</html>

Purpose:
‚û§ Provides navigation links to:
‚û§ Add registration
‚û§ List user-specific registrations‚û§ 
‚û§ Used as a common include file in other JSPs.

‚úÖ list_registrations.jsp
Purpose:
Displays registrations returned from the servlet using a ResultSet.

‚úÖCode Implementation
<%@page import="java.sql.ResultSet"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<table>
		<tr>
			<th>Id</th>
			<th>Name</th>
			<th>Course</th>
			<th>Email</th>
			<th>Mobile</th>
		</tr>

		<%
		ResultSet result = (ResultSet) request.getAttribute("registrations");
		while (result.next()) {
		%>
		<tr>
			<td><%=result.getInt(1)%></td>
			<td><%=result.getString(2)%></td>
			<td><%=result.getString(3)%></td>
			<td><%=result.getString(4)%></td>
			<td><%=result.getString(5)%></td>
		</tr>

		<%
		}
		%>
	</table>

</body>
</html>

Result:
Dynamically renders all the user's registrations in a table.

‚úÖ You should start/run the application from index.jsp.
Because:
‚û§ index.jsp contains the login form.
‚û§ On form submission, the login request goes to LoginController.java.

If login is successful:
‚û§ LoginController sets the session and redirects to menu.jsp (or directly to registration.jsp depending on your setup).

############################
Project - ems - Iteration 5
############################
‚úÖ EMS Project - Iteration 5 (Employee Management System)

üîÑ HIGH-LEVEL FLOW (Iteration 5 Feature Summary)
1. User logs in and navigates to list_registrations.jsp.
2. This JSP displays a list of registrations for the logged-in user.
3. Each row has a "delete" link beside a registration.
4. When user clicks on delete:
‚û§ DeleteController.java receives the request (/deleteReg?email=...)
‚û§ It deletes the registration by email from the DB.
‚û§ Then, it reloads the list of registrations for the same user.
‚û§ Forwards the request to the list_registrations.jsp page to display updated data.

1. list_registrations.jsp
üìã Purpose:
Displays all registrations made by the current logged-in user.
Provides a Delete link for each row using the registration's email.

<%@page import="java.sql.ResultSet"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
	
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<table>
		<tr>
			<th>Id</th>
			<th>Name</th>
			<th>Course</th>
			<th>Email</th>
			<th>Mobile</th>
		</tr>

		<%
		ResultSet result = (ResultSet) request.getAttribute("registrations");
		while (result.next()) {
		%>
		<tr>
			<td><%=result.getInt(1)%></td>
			<td><%=result.getString(2)%></td>
			<td><%=result.getString(3)%></td>
			<td><%=result.getString(4)%></td>
			<td><%=result.getString(5)%></td>
			<td><a href="deleteReg?email=<%=result.getString(4) %>">delete</a></td>
			<td><a href="updateReg?id=<%=result.getString(1)%>">update</a></td>
		</tr>
		<%
		}
		%>
	</table>
</body>
</html>

‚û§ The list of registrations is passed from the backend via request.setAttribute().
‚û§ Clicking this link sends a GET request to DeleteController with the email to be deleted.

2. DeleteController.java
üìã Purpose:
Handles deleting a registration based on the email ID.

package com.ems.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.ResultSet;

import com.ems.model.DBServiceImpl;
@WebServlet("/deleteReg")
public class DeleteController extends HttpServlet {
	private static final long serialVersionUID = 1L;
    public DeleteController() {
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		try {
			String email = request.getParameter("email");
			DBServiceImpl service = new DBServiceImpl();
			service.connectDB();
			service.deleteRegistration(email);
			
			HttpSession session = request.getSession(false);
			String sessionEmail = (String)session.getAttribute("email");
			
			ResultSet result = service.getUserByEmail(sessionEmail);
			
			int userId = 0;
			if(result.next()) {
				userId = result.getInt(1);
			}
			
			ResultSet registrations = service.getRegistrationsByUser(userId);
			request.setAttribute("registrations", registrations);
			RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/list_registrations.jsp");
			rd.forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
}

üîç Key Flow:
1. Extracts the email from the request parameter (e.g., deleteReg?email=abc@example.com).
String email = request.getParameter("email");


2. Calls deleteRegistration() method in DBServiceImpl to delete the record
service.deleteRegistration(email);

3. Retrieves the currently logged-in user's email from the session.
HttpSession session = request.getSession(false);
String sessionEmail = (String)session.getAttribute("email");

4. Gets full user details (specifically the user_id) from the database.
ResultSet result = service.getUserByEmail(sessionEmail);

5. Fetches updated list of registrations for that user and sets it into the request scope.
ResultSet registrations = service.getRegistrationsByUser(userId);
request.setAttribute("registrations", registrations);

Forwards to list_registrations.jsp to show updated list after deletion.
RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/list_registrations.jsp");
rd.forward(request, response);

3. DBServiceImplementation.java (with DBService.java)
üìã Purpose:
Provides implementation for database operations.

‚úÖDBService.java Interface
package com.ems.model;
import java.sql.ResultSet;

public interface DBService {
	public void connectDB(); // Connection to the database
	public boolean verifyLogin(String email, String password);
	public ResultSet getUserByEmail(String email);
	public void createRegistration(String name,String course,String emailId,String mobile, int userId);
	public ResultSet getRegistrationsByUser(int userId);
	public void deleteRegistration(String email);
	public ResultSet getRegistrationById(int id);
	
}

DBServiceImplementation.java that implements DBService interface
package com.ems.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class DBServiceImplementation implements DBService {
	private Connection conn;
	private Statement stmnt;

	@Override
	public void connectDB() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/ems", "root", "ankur@1234");
			stmnt = conn.createStatement();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean verifyLogin(String email, String password) {
		try {
			ResultSet result = stmnt
					.executeQuery("select * from user where email='" + email + "' and password='" + password + "'");
			return result.next();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	‚úÖ getUserByEmail(String email)
	@Override
	public ResultSet getUserByEmail(String email) {
		try {
			ResultSet result=stmnt.executeQuery("select * from user where email='"+email+"'");
			return result;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public void createRegistration(String name, String course, String emailId, String mobile, int userId) {
		try {
			stmnt.executeUpdate("insert into registration (name,course, email,mobile,user_id) values('"+name+"', '"+course+"', '"+emailId+"', '"+mobile+"', '"+userId+"')");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	@Override
	public ResultSet getRegistrationsByUser(int userId) {
	try {
		ResultSet result=stmnt.executeQuery("Select * from registration where user_id='"+userId+"'");
		return result;
	} catch (Exception e) {
		e.printStackTrace();
	}
	return null;
	}

	‚úÖ deleteRegistration(String email)
	@Override
	public void deleteRegistration(String email) {
		try {
			stmnt.executeUpdate("Delete from registration where email='"+email+"'");
			} catch (Exception e) {
				e.printStackTrace();
			}
		
	}

	@Override
	public ResultSet getRegistrationById(int id) {
		try {
			ResultSet result = stmnt.executeQuery("select * from registration where id='"+id+"'");
			return result;	
		} catch (Exception e) {
				e.printStackTrace();
			}
		return null;
	}
}

‚úÖ deleteRegistration(String email)
stmnt.executeUpdate("DELETE FROM registration WHERE email='"+email+"'");
Deletes the record from registration table where email matches.

‚ö†Ô∏è This works because email is assumed to be unique for registration.

‚úÖ getUserByEmail(String email)
ResultSet result = stmnt.executeQuery("SELECT * FROM user WHERE email='"+email+"'");
Gets user details (needed for fetching the user_id).

‚úÖ getRegistrationsByUser(int userId)
ResultSet result = stmnt.executeQuery("SELECT * FROM registration WHERE user_id='"+userId+"'");
Fetches all registrations tied to a specific user.

üí° Database
‚û§ You are using two main tables:
‚û§ user table (with columns: id, name, email, password)
‚û§ registration table (with: id, name, course, email, mobile, user_id)

Each registration is linked to a specific user via user_id.

üß† Full Iteration 5 Summary (What's Added/Changed)
| Feature                  | Details                                                                             |
| ------------------------ | ----------------------------------------------------------------------------------- |
| ‚úÖ View All Registrations | `list_registrations.jsp` displays a table of all entries tied to the logged-in user |
| üóëÔ∏è Delete Registration  | Each row has a delete button that calls `DeleteController`                          |
| üîÅ Refresh List          | After deletion, it fetches the updated list and reloads the JSP                     |
| üì¶ Code Additions        | `DeleteController.java`, `deleteRegistration()` in DBServiceImpl                    |
| üß© Integration           | Uses session email to identify user and fetch relevant data                         |
